---
import * as m from '../paraglide/messages.js';
import { MAPBOX_ACCESS_TOKEN } from "astro:env/client";

import ShuffleBtn from '../assets/images/shuffle_btn.svg';
import CityBtn from '../assets/images/city.svg';
import CountryBtn from '../assets/images/country.svg';
import PolBtn from '../assets/images/pol.svg';
import RoleBtn from '../assets/images/role.svg';
import StyleBtn from '../assets/images/style.svg';

import Geopoint from '../assets/images/geopoint.svg';
import Cluster1 from '../assets/images/cluster_1.svg';
import Cluster2 from '../assets/images/cluster_2.svg';
import Cluster3 from '../assets/images/cluster_3.svg';

// Get Mapbox token from environment variables
const mapboxToken = MAPBOX_ACCESS_TOKEN;

const filters = [
  { id: "country", label: "Country", icon: CountryBtn, options: ["France", "USA", "Germany", "Japan"] },
  { id: "city", label: "City", icon: CityBtn, options: ["Paris", "Berlin", "Tokyo", "NYC"] },
  { id: "style", label: "Style", icon: StyleBtn, options: ["Jazz", "HipHop", "Techno"] },
  { id: "role", label: "Role", icon: RoleBtn, options: ["DJ", "Producer", "Singer"] },
  { id: "pol", label: "Pol", icon: PolBtn, options: ["Option A", "Option B", "Option C"] },
];
---

<div class="map-container">
  <div id="wavmap" class="map">
    <button class="shuffle">
      <img src={ShuffleBtn.src} alt="shuffle" />
    </button>
  </div>
    <div class="filters-container">
      <h2>{m.artist_map_title()}</h2>
      <!-- <button class="filter">
        <img src={CountryBtn.src} alt="Country" />
      </button>
      <button class="filter">
        <img src={CityBtn.src} alt="city" />
      </button>
      <button class="filter">
        <img src={StyleBtn.src} alt="Style" />
      </button>
      <button class="filter">
        <img src={RoleBtn.src} alt="Role" />
      </button>
      <button class="filter">
        <img src={PolBtn.src} alt="city" />
      </button> -->

      {filters.map(filter => (
        <div key={filter.id} class="filter-wrapper">
          <button 
            class="filter" 
            data-target={filter.id}
          >
            <img src={filter.icon.src} alt={filter.label} />
          </button>

          <!-- Ligne d'options cachée par défaut -->
          <div id={filter.id} class="filter-options hidden mt-2 flex flex-wrap gap-2">
            {filter.options.map(opt => (
              <span>{opt}</span>
            ))}
          </div>
        </div>
      ))}
    </div>
</div>

<script define:vars={{ mapboxToken }}>
  // Fetch real artist data from Directus API
  async function loadApprovedArtists() {
    try {
      const response = await fetch('/api/artists/approved');
      const data = await response.json();
      
      if (data.success && data.artists) {
        return data.artists;
      } else {
        return getFallbackArtists();
      }
    } catch (error) {
      console.error('🗺️ Error loading artists, using fallback data:', error);
      return getFallbackArtists();
    }
  }

  document.querySelectorAll('.filter').forEach(btn => {
    btn.addEventListener('click', () => {
      const targetId = btn.dataset.target;
      const el = document.getElementById(targetId);
      if (el) {
        el.classList.toggle('hidden');
      }
    });
  });

  // Fallback data si l'API échoue
  function getFallbackArtists() {
    return [
      {
        id: 1,
        artistName: "DJ Sample Paris",
        city: "Paris",
        country: "France",
        latitude: 48.8566,
        longitude: 2.3522,
        activities: ["DJ", "Producer"],
        genres: ["Techno", "House"]
      },
      {
        id: 2,
        artistName: "Berlin Beats",
        city: "Berlin",
        country: "Germany",
        latitude: 52.5200,
        longitude: 13.4050,
        activities: ["DJ", "Label"],
        genres: ["Techno", "Electronic"]
      },
      {
        id: 3,
        artistName: "Barcelona Vibes",
        city: "Barcelona",
        country: "Spain",
        latitude: 41.3851,
        longitude: 2.1734,
        activities: ["Producer", "Collective"],
        genres: ["Bass", "Experimental"]
      }
    ];
  }
  
  // Cleanup function to properly remove existing map
  function cleanupMap() {
    if (window.wavmapInstance) {
      try {
        window.wavmapInstance.remove();
      } catch (e) {
      }
      window.wavmapInstance = null;
    }
  }
  
  async function initializeMap() {
    const mapContainer = document.getElementById('wavmap');
    
    if (!mapContainer) {
      return;
    }
    
    // Always cleanup existing map first
    cleanupMap();
    
    // Wait for Mapbox GL to load with retry mechanism
    let attempts = 0;
    const maxAttempts = 10;
    
    while (typeof mapboxgl === 'undefined' && attempts < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, 100));
      attempts++;
    }
    
    // Check if Mapbox GL is available
    if (typeof mapboxgl === 'undefined') {
      console.error('🗺️ Mapbox GL JS not loaded after', maxAttempts, 'attempts');
      return;
    }
    
    // Use token from environment variables
    mapboxgl.accessToken = mapboxToken;
    
    try {

      const europeBounds = [
          [ -25, 35 ], // Coin sud-ouest
          [ 50, 70 ]   // Coin nord-est
      ];
      
      const map = new mapboxgl.Map({
        container: 'wavmap',
        style: 'mapbox://styles/mapbox/satellite-v9',
        center: [2.3522, 48.8566], // Centered on Paris initially
        zoom: 12, // Show Europe level view,
        maxBounds: europeBounds,
        minZoom: 2,
      });
      
      // Store global instance
      window.wavmapInstance = map;
      
      // Add navigation controls
      map.addControl(new mapboxgl.NavigationControl());
      
      // Add fullscreen control  
      map.addControl(new mapboxgl.FullscreenControl());
      
      // Load and add real artist data when map is ready
      map.on('load', async function() {
        
        // Fetch approved artists from API
        const artists = await loadApprovedArtists();

        map.addSource('points', {
          type: 'geojson',
          data: artists, // Remplacez par votre source de données
          cluster: true,
          clusterMaxZoom: 14,
          clusterRadius: 50
        });
        
        artists.forEach(artist => {
          // Create lightweight popup (optimized version)
          const popup = new mapboxgl.Popup({ offset: 25 })
            .setHTML(`
              <div class="artist-popup">
                <h3>${artist.artistName}</h3>
                <p><strong>${artist.city}, ${artist.country}</strong></p>
                <p><strong>Activities:</strong> ${artist.activities.join(', ')}</p>
                <p><strong>Genres:</strong> ${artist.genres.slice(0, 3).join(', ')}${artist.genres.length > 3 ? '...' : ''}</p>
                <div class="popup-actions">
                  <a href="/artist/${artist.id}" class="view-profile-btn">👤 Voir le profil</a>
                </div>
              </div>
            `);
          
          // Create a marker with coordinates from database
          new mapboxgl.Marker({
            color: '#6366f1' // Match the site's primary color
          })
          .setLngLat([artist.longitude, artist.latitude])
          .setPopup(popup)
          .addTo(map);
        });
      });
      
      map.on('error', function(e) {
        console.error('🗺️ Mapbox error:', e);
      });
      
    } catch (error) {
      console.error('🗺️ Error initializing Mapbox:', error);
    }
  }
  
  // Cleanup before page swap (View Transitions)
  document.addEventListener('astro:before-swap', () => {
    cleanupMap();
  });
  
  // Reinitialize after page swap (View Transitions)  
  document.addEventListener('astro:after-swap', () => {
    // Small delay to ensure DOM is ready
    setTimeout(initializeMap, 50);
  });
  
  // Initialize map on page load (View Transitions)
  document.addEventListener('astro:page-load', () => {
    setTimeout(initializeMap, 50);
  });
  
  // Initialize on DOM content loaded (first load)
  document.addEventListener('DOMContentLoaded', () => {
    initializeMap();
  });
  
  // Fallback for immediate execution
  if (document.readyState !== 'loading') {
    initializeMap();
  }
  
  // TODO: In the future, fetch real artist data from Directus
  // async function loadArtistLocations() {
  //   try {
  //     const response = await fetch('/api/artists/locations');
  //     const artists = await response.json();
  //     // Add markers for real artists
  //   } catch (error) {
  //     console.error('Error loading artist locations:', error);
  //   }
  // }
</script>

<style>
  .map-container {
    width: 100%;
    margin: 0 auto;
    display: flex;
    color: black;
    gap: 2rem;
    padding: 1rem
  }

  .filters-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    text-align: left;
    align-items: flex-start;
  }

  .map-container h2 {
    font-size: 2rem;
    font-weight: 700;
    color: #1f2937;
    margin: 0 0 1rem 0;
    text-align: center;
    background-clip: text;
    -webkit-background-clip: text;
  }

  .shuffle {
    position: absolute;
    left: 1rem;
    bottom: 1rem;
    width: 150px;
    z-index: 3;
  }

  .filter img {
    height: 50px;
  }

  .map {
    max-width: 70%;
    flex: 1;
    height: 600px;
    overflow: hidden;

    filter: 
      grayscale(100%) 
      contrast(100%) 
      saturate(220%) 
      brightness(220%)
      hue-rotate(180deg);
  }

  .map .mapboxgl-ctrl {
    filter: none;
  }

  /* Custom popup styles */
  :global(.mapboxgl-popup-content) {
    border-radius: 0.5rem;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  }

  :global(.artist-popup h3) {
    margin: 0 0 0.5rem 0;
    color: #1f2937;
    font-size: 1.1rem;
    font-weight: 600;
  }

  :global(.artist-popup p) {
    margin: 0.25rem 0;
    font-size: 0.9rem;
    color: #6b7280;
  }

  :global(.artist-popup strong) {
    color: #374151;
  }

  :global(.artist-popup .social-links) {
    margin-top: 0.75rem;
    padding-top: 0.5rem;
    border-top: 1px solid #e5e7eb;
  }

  :global(.artist-popup .social-links a) {
    display: inline-block;
    margin: 0 0.5rem 0.25rem 0;
    color: #6366f1;
    text-decoration: none;
    font-size: 0.8rem;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    background-color: #f8f9ff;
    transition: all 0.2s ease;
  }

  :global(.artist-popup .social-links a:hover) {
    background-color: #6366f1;
    color: white;
    transform: translateY(-1px);
  }

  :global(.artist-popup .popup-actions) {
    margin-top: 0.75rem;
    padding-top: 0.5rem;
    border-top: 1px solid #e5e7eb;
    text-align: center;
  }

  :global(.artist-popup .view-profile-btn) {
    display: inline-block;
    background: linear-gradient(135deg, #6366f1, #8b5cf6);
    color: white;
    text-decoration: none;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    font-size: 0.85rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  :global(.artist-popup .view-profile-btn:hover) {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .map-container {
      padding: 2rem 1.5rem;
      margin: 0 1rem;
    }

    .map {
      height: 400px;
    }
  }
</style>

<!-- Import Mapbox CSS and JS -->
<link href="https://api.mapbox.com/mapbox-gl-js/v3.0.1/mapbox-gl.css" rel="stylesheet">
<script src="https://api.mapbox.com/mapbox-gl-js/v3.0.1/mapbox-gl.js"></script>