---
import * as m from '../paraglide/messages.js';
import { getLocale } from '../paraglide/runtime.js';
import CityCountryPicker from './CityCountryPicker.astro';

const currentLang = getLocale();
---

<div class="artist-form-container">
  
  <form class="artist-form" id="artist-signup-form">
    <div class="form-group">
      <label for="artist-name">{m.artist_name()} *</label>
      <input type="text" id="artist-name" name="artistName" required>
    </div>

    <div class="form-group">
      <label for="real-name">{m.real_name()}</label>
      <input type="text" id="real-name" name="realName">
    </div>

    <div class="form-group">
      <label for="pronouns">{m.pronouns()}</label>
      <input type="text" id="pronouns" name="pronouns" placeholder={m.pronouns_placeholder()}>
    </div>

    <div class="form-group">
      <label for="email">{m.email()} *</label>
      <input type="email" id="email" name="email" required>
    </div>

    <!-- Smart City/Country Picker -->
    <CityCountryPicker />

    <div class="form-group">
      <label for="activities">{m.activities()} *</label>
      <select id="activities" name="activities" required>
        <option value="">Select an activity</option>
        <option value="dj">{m.dj()}</option>
        <option value="producer">{m.producer()}</option>
        <option value="curator">{m.curator()}</option>
        <option value="promoter">{m.promoter()}</option>
        <option value="label">{m.label()}</option>
        <option value="bookingagency">{m.booking_agency()}</option>
        <option value="collective">{m.collective()}</option>
        <option value="radio">{m.radio()}</option>
        <option value="recordstore">{m.record_store()}</option>
        <option value="festival">{m.festival()}</option>
        <option value="medias">{m.media()}</option>
        <option value="other">{m.other()}</option>
      </select>
    </div>

    <div class="form-group">
      <label for="genres">{m.musical_styles()} *</label>
      <select id="genres" name="genres" required>
        <option value="">Select a musical style</option>
        <option value="bass">Bass</option>
        <option value="bailefunkbresilianfunk">Baile Funk / Bresilian Funk</option>
        <option value="breakbeat">Breakbeat</option>
        <option value="drumandbass">Drum & Bass</option>
        <option value="dubstep">Dubstep</option>
        <option value="jerseyclub">Jersey Club</option>
        <option value="garage">Garage</option>
        <option value="breaks">Breaks</option>
        <option value="techno">Techno</option>
        <option value="dancehall">Dancehall</option>
        <option value="footwork">Footwork</option>
        <option value="grime">Grime</option>
        <option value="jungle">Jungle</option>
        <option value="rap">Rap</option>
        <option value="bouyon">Bouyon</option>
        <option value="hiphop">Hip-Hop</option>
        <option value="shatta">Shatta</option>
        <option value="club">Club</option>
        <option value="baltimoreclub">Baltimore Club</option>
        <option value="dub">Dub</option>
        <option value="ghettotech">Ghetto Tech</option>
        <option value="gqom">Gqom</option>
        <option value="house">House</option>
        <option value="trap">Trap</option>
        <option value="afrobeats">Afrobeats</option>
        <option value="amapiano">Amapiano</option>
        <option value="dembow">Dembow</option>
        <option value="ukfunky">UK Funky</option>
        <option value="reggaeton">Reggaeton</option>
        <option value="ghettohouse">Ghetto House</option>
        <option value="speedgarage">Speed Garage</option>
        <option value="afrohouse">Afro House</option>
        <option value="batida">Batida</option>
        <option value="experimental">Experimental</option>
        <option value="electronic">Electronic</option>
        <option value="ambient">Ambient</option>
        <option value="neoperrero">Neo Perreo</option>
        <option value="trance">Trance</option>
        <option value="deephouse">Deep House</option>
        <option value="dubtechno">Dub Techno</option>
        <option value="techhouse">Tech House</option>
        <option value="acid">Acid</option>
        <option value="bassline">Bassline</option>
        <option value="electro">Electro</option>
        <option value="brokenbeat">Broken Beat</option>
        <option value="kuduro">Kuduro</option>
        <option value="ballroom">Ballroom</option>
        <option value="cumbia">Cumbia</option>
        <option value="guaracha">Guaracha</option>
        <option value="downtempo">Downtempo</option>
        <option value="hyperpop">Hyperpop</option>
        <option value="dance">Dance</option>
        <option value="drill">Drill</option>
        <option value="gabber">Gabber</option>
        <option value="soca">Soca</option>
        <option value="coupedecale">Coupé-Décalé</option>
        <option value="electronica">Electronica</option>
        <option value="minimal">Minimal</option>
        <option value="psytrance">Psytrance</option>
        <option value="zouk">Zouk</option>
        <option value="hardcore">Hardcore</option>
        <option value="balearichouse">Balearic House</option>
        <option value="chaabi">Chaabi</option>
        <option value="donk">Donk</option>
        <option value="kwaito">Kwaito</option>
        <option value="raptorhouse">Raptor House</option>
        <option value="singeli">Singeli</option>
        <option value="calypso">Calypso</option>
        <option value="miamibass">Miami Bass</option>
        <option value="harddrum">Hard Drum</option>
        <option value="juke">Juke</option>
        <option value="bubbling">Bubbling</option>
        <option value="latinclub">Latin Club</option>
        <option value="rai">Rai</option>
      </select>
    </div>

    <div class="form-group">
      <label for="soundcloud">SoundCloud</label>
      <input type="url" id="soundcloud" name="soundcloud" placeholder="https://soundcloud.com/yourprofile">
    </div>

    <div class="form-group">
      <label for="spotify">Spotify</label>
      <input type="url" id="spotify" name="spotify" placeholder="https://open.spotify.com/artist/...">
    </div>

    <div class="form-group">
      <label for="instagram">Instagram</label>
      <input type="text" id="instagram" name="instagram" placeholder="@yourusername">
    </div>

    <div class="form-group">
      <label for="bio">{m.bio()} ({m.bio_max()})</label>
      <textarea id="bio" name="bio" rows="4" maxlength="250" placeholder={m.bio_placeholder()} onInput="updateCharCount('bio', 'bio-count', 250)"></textarea>
      <small class="char-count" id="bio-count">0/250 {m.characters()}</small>
    </div>

    <div class="form-group">
      <label for="social-political">{m.social_political()} {m.social_political_optional()}</label>
      <p class="form-help-text">
        {m.social_political_help()}
      </p>
      <select id="social-political" name="socialPolitical">
        <option value="">Select a social/political subject (optional)</option>
        <option value="queerrights">{m.queer_rights()}</option>
        <option value="flintarepresentation">{m.flinta_representation()}</option>
        <option value="genderequality">{m.gender_equality()}</option>
        <option value="anti-racism">{m.anti_racism()}</option>
        <option value="decolonialism">{m.decolonialism()}</option>
        <option value="acccessibilityforpeoplewithdisabilities">{m.access_disabled()}</option>
        <option value="economicequalityclasssolidarity">{m.economic_equality()}</option>
        <option value="climatejustice">{m.climate_justice()}</option>
        <option value="geographicmarginalization">{m.geographic_marginalization()}</option>
      </select>
    </div>

    <div class="form-group">
      <label for="themes-development">{m.themes_development()} {m.themes_development_optional()}</label>
      <textarea id="themes-development" name="themesDevelopment" rows="4" maxlength="500" placeholder={m.themes_development_placeholder()} onInput="updateCharCount('themes-development', 'themes-count', 500)"></textarea>
      <small class="char-count" id="themes-count">0/500 {m.characters()}</small>
    </div>

    <div class="form-group">
      <label for="club-politics">{m.club_politics()} {m.club_politics_optional()}</label>
      <textarea id="club-politics" name="clubPolitics" rows="4" maxlength="500" placeholder={m.club_politics_placeholder()} onInput="updateCharCount('club-politics', 'club-count', 500)"></textarea>
      <small class="char-count" id="club-count">0/500 {m.characters()}</small>
    </div>

    <button type="submit" class="submit-btn">
      <img src="/src/assets/images/send_flat.svg" alt="Submit" />
    </button>
  </form>
</div>

<script define:vars={{ 
  selectActivity: m.select_activity(),
  selectGenre: m.select_genre(),
  submitting: m.submitting(),
  joinCommunity: m.join_community(),
  characters: m.characters()
}}>
  // Function to update character count
  function updateCharCount(textareaId, counterId, maxLength) {
    const textarea = document.getElementById(textareaId);
    const counter = document.getElementById(counterId);
    if (textarea && counter) {
      const currentLength = textarea.value.length;
      counter.textContent = `${currentLength}/${maxLength} ${characters}`;
      
      // Change color when approaching limit
      if (currentLength > maxLength * 0.8) {
        counter.style.color = '#ef4444'; // red
      } else if (currentLength > maxLength * 0.6) {
        counter.style.color = '#f59e0b'; // amber
      } else {
        counter.style.color = '#6b7280'; // gray
      }
    }
  }

  function initArtistForm() {
    const form = document.getElementById('artist-signup-form');
    if (!form) return;

    // Initialize character counters
    updateCharCount('bio', 'bio-count', 250);
    updateCharCount('themes-development', 'themes-count', 500);
    updateCharCount('club-politics', 'club-count', 500);

    
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const submitBtn = form.querySelector('button[type="submit"]');
      const originalText = submitBtn?.textContent || joinCommunity;
      
      // Check that at least one activity is selected
      const activitiesField = document.getElementById('activities');
      if (!activitiesField || !activitiesField.value) {
        alert(selectActivity);
        return;
      }

      // Check that at least one genre is selected
      const genresField = document.getElementById('genres');
      if (!genresField || !genresField.value) {
        alert(selectGenre);
        return;
      }

      // Validate and auto-resolve city coordinates if missing
      const cityInput = form.querySelector('#city');
      const countryInput = form.querySelector('#country');
      const cityIdField = form.querySelector('#city-id');
      const latField = form.querySelector('#latitude');
      const lngField = form.querySelector('#longitude');

      if (cityInput && countryInput && cityInput.value && countryInput.value) {
        // If city is entered but no cityId, try to find it
        if (!cityIdField?.value || !latField?.value || !lngField?.value) {
          console.log('🔍 Missing city data, attempting to resolve...');

          // Try to find the city in the cities data
          if (window.citiesData) {
            const matchingCity = window.citiesData.find(city =>
              city.name.toLowerCase() === cityInput.value.toLowerCase() &&
              city.country === countryInput.value
            );

            if (matchingCity) {
              console.log('✅ Found matching city:', matchingCity);
              if (cityIdField) cityIdField.value = matchingCity.id;
              if (latField && matchingCity.coordinates) latField.value = matchingCity.coordinates[1];
              if (lngField && matchingCity.coordinates) lngField.value = matchingCity.coordinates[0];
            } else {
              console.warn('⚠️ City not found in database:', cityInput.value, countryInput.value);
              alert(`Warning: The city "${cityInput.value}" was not found in our database. Your submission will be processed but may not appear on the map immediately.`);
            }
          }
        }
      }
      
      try {
        // Disable button
        if (submitBtn) {
          submitBtn.disabled = true;
          submitBtn.textContent = submitting;
        }
        
        // Prepare data
        const formData = new FormData(form);
        
        // Send to API
        const response = await fetch('/api/artist/submit', {
          method: 'POST',
          body: formData,
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Success - redirect to thank you page
          if (result.redirect) {
            window.location.href = result.redirect;
          } else {
            window.location.href = '/thank-you';
          }
        } else {
          // Error
          alert(`❌ ${result.message}`);
        }
        
      } catch (error) {
        console.error('Form submission error:', error);
        alert('❌ Network error. Please check your connection and try again.');
      } finally {
        // Re-enable button
        if (submitBtn) {
          submitBtn.disabled = false;
          submitBtn.textContent = originalText;
        }
      }
    });
  }

  // Initialize on load
  document.addEventListener('DOMContentLoaded', initArtistForm);
  
  // Make updateCharCount available globally for inline onInput calls
  window.updateCharCount = updateCharCount;
</script>

<style>
  .artist-form-container {
    background: white;
    border-radius: 1.5rem;
    max-width: 600px;
    width: 100%;
    margin: 0 auto;
  }

  .artist-form-container h2 {
    font-size: 2rem;
    font-weight: 700;
    color: #1f2937;
    margin: 0 0 1rem 0;
    text-align: center;
    background: linear-gradient(135deg, #6366f1, #8b5cf6);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .form-description {
    text-align: center;
    color: #6b7280;
    margin-bottom: 2rem;
    font-size: 1.1rem;
  }

  .artist-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
  }

  label {
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: #1f2937;
    font-size: 0.9rem;
  }

  input, select, textarea {
    padding: 0.75rem;
    border: 2px solid black;
    border-radius: 0;
    font-size: 1rem;
    transition: all 0.2s ease;
    background-color: transparent;
    color: white;
    font-weight: 700;
  }

  input:focus, select:focus, textarea:focus {
    outline: none;
    border-color: black;
  }

  input::placeholder, textarea::placeholder {
    color: rgba(255, 255, 255, 0.7);
    font-weight: 700;
  }

  .city-note {
    font-size: 0.8rem;
    color: #6b7280;
    margin-top: 0.25rem;
    font-style: italic;
  }

  .form-help-text {
    font-size: 0.85rem;
    margin-bottom: 1rem;
    line-height: 1.4;
    font-style: italic;
  }

  .char-count {
    font-size: 0.75rem;
    margin-top: 0.25rem;
    display: block;
    text-align: right;
    color: black !important;
  }



  /* Submit Button */
  .submit-btn {
    color: white;
    border: none;
    padding: 1rem 2rem;
    border-radius: 0.75rem;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    margin-top: 1rem;
  }

  .submit-btn:hover {
    transform: translateY(-2px);
  }

  .submit-btn:active {
    transform: translateY(0);
  }

  .submit-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .artist-form-container {
      padding: 2rem 1.5rem;
      margin: 0 1rem;
    }

    .checkbox-group {
      grid-template-columns: repeat(auto-fit, minmax(130px, 1fr));
      max-height: 250px;
    }
  }
</style>