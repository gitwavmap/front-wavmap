---
import ArtistForm from './ArtistForm.astro';
import AuthModalForm from './AuthModalForm.astro';
import * as m from '../paraglide/messages.js';

// Get authentication state from Layout props
const { user, isAuthenticated } = Astro.props;
---

<!-- Dropdown Content -->
<div class="dropdown-content">
  <h2 class="modal-title">Join the map</h2>

  <!-- Form Content -->
      <!-- Auth Form (shown when not logged in) -->
      <div id="auth-section" class={isAuthenticated ? "hidden" : ""}>
        <div class="auth-intro">
        </div>
        <AuthModalForm />
      </div>

  <!-- Artist Form (shown when logged in) -->
  <div id="artist-section" class={isAuthenticated ? "" : "hidden"}>
    <ArtistForm />
  </div>
</div>


<style>
  .dropdown-content {
    padding: 20px;
    background: transparent;
  }

  .modal-title {
    text-align: center;
    font-size: 2rem;
    font-weight: 900;
    color: white;
    margin: 0 0 20px 0;
    text-transform: none;
    letter-spacing: normal;
  }

  .auth-intro {
    text-align: center;
    margin-bottom: 2rem;
    padding: 1rem;
    background: transparent;
    border: none;
  }

  .auth-intro p {
    color: black;
    font-weight: 500;
    font-size: 1rem;
    margin: 0;
    text-transform: none;
    letter-spacing: normal;
  }

  /* Form styling to match the design */
  :global(.artist-form-container) {
    background: transparent !important;
    padding: 0 !important;
    margin: 0 !important;
    box-sizing: border-box !important;
  }

  :global(.artist-form) {
    background: transparent !important;
  }

  :global(.auth-modal-container) {
    background: transparent !important;
  }

  :global(.form-group) {
    margin-bottom: 20px !important;
  }

  :global(.form-group label) {
    display: block;
    margin-bottom: 8px;
    font-weight: 700;
    color: black;
    font-size: 14px;
    text-transform: uppercase;
  }

  :global(.form-group input),
  :global(.form-group select),
  :global(.form-group textarea) {
    width: 100%;
    padding: 10px 12px;
    border: 2px solid black;
    background: transparent;
    font-size: 14px;
    color: white;
    font-weight: 700;
    border-radius: 0;
    transition: all 0.2s ease;
  }

  :global(.form-group input:focus),
  :global(.form-group select:focus),
  :global(.form-group textarea:focus) {
    outline: none;
    background: transparent;
  }

  :global(.form-group input::placeholder),
  :global(.form-group textarea::placeholder) {
    color: rgba(255, 255, 255, 0.7);
    font-weight: 700;
  }

  /* Submit button styling */
  :global(.submit-btn) {
    background: none;
    border: none;
    padding: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    margin: 15px auto;
    display: block;
    width: auto;
  }

  :global(.submit-btn:hover) {
    opacity: 0.7;
  }

  :global(.submit-btn img) {
    width: auto;
    height: 40px;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .dropdown-content {
      padding: 15px 20px;
      box-sizing: border-box;
    }

    .modal-title {
      font-size: 1.5rem;
      margin: 0 0 15px 0;
    }

    :global(.form-group input),
    :global(.form-group select),
    :global(.form-group textarea) {
      box-sizing: border-box;
    }
  }
</style>

<script>
  function handleAuthSuccess() {
    const authSection = document.getElementById('auth-section');
    const artistSection = document.getElementById('artist-section');

    if (authSection && artistSection) {
      authSection.classList.add('hidden');
      artistSection.classList.remove('hidden');
    }
  }

  // Listen for auth success event
  window.addEventListener('authSuccess', handleAuthSuccess);

  // Initialize on DOM loaded
  document.addEventListener('DOMContentLoaded', () => {
    window.addEventListener('authSuccess', handleAuthSuccess);
  });

  // Handle case where script loads after DOM
  if (document.readyState !== 'loading') {
    window.addEventListener('authSuccess', handleAuthSuccess);
  }
</script>