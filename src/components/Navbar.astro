---
import * as m from '../paraglide/messages.js';
import ArtistFormModal from './ArtistFormModal.astro';
import Blog from '../assets/images/blog_button.svg';
import BlogFlat from '../assets/images/blog_flat.svg';
import Map from '../assets/images/map_button.svg';
import MapFlat from '../assets/images/map_flat.svg';
import About from '../assets/images/about_button.svg';
import AboutFlat from '../assets/images/about_flat.svg';
import HoverLink from './HoverLink.astro';
import Logo from '../assets/images/logo.svg';
import CloseBtn from '../assets/images/close_btn.svg';

interface Props {
  currentPage: 'map' | 'blog' | 'about';
}

const { currentPage } = Astro.props;
const user = Astro.locals.user;
const currentPath = Astro.url.pathname;

---

<nav class="navbar">
  <!-- Partie GAUCHE : Boutons dynamiques (desktop) + boutons regroupés (mobile) -->
  <div class="nav-left">
    <!-- Bouton gauche desktop -->
    <div class="desktop-left">
      {currentPath.includes('/about') ? (
        <HoverLink href="/map" normal={MapFlat.src} hover={Map.src} alt="map" />
      ) : currentPath.includes('/blog') ? (
        <HoverLink href="/map" normal={MapFlat.src} hover={Map.src} alt="map" />
      ) : (
        <HoverLink href="/about" normal={AboutFlat.src} hover={About.src} alt="about" />
      )}
    </div>

    <!-- Boutons regroupés mobile -->
    <div class="mobile-buttons">
      {currentPath.includes('/about') ? (
        <>
          <HoverLink href="/map" normal={MapFlat.src} hover={Map.src} alt="map" />
          <HoverLink href="/blog" normal={BlogFlat.src} hover={Blog.src} alt="blog" />
        </>
      ) : currentPath.includes('/blog') ? (
        <>
          <HoverLink href="/map" normal={MapFlat.src} hover={Map.src} alt="map" />
          <HoverLink href="/about" normal={AboutFlat.src} hover={About.src} alt="about" />
        </>
      ) : (
        <>
          <HoverLink href="/about" normal={AboutFlat.src} hover={About.src} alt="about" />
          <HoverLink href="/blog" normal={BlogFlat.src} hover={Blog.src} alt="blog" />
        </>
      )}
    </div>
  </div>

  <!-- Partie CENTRE : Titre + sous-titre (caché en mobile) -->
  <div class="nav-center">
    <h1>The European electronic music artists map</h1>
    <h1>Connect with artists around Europe</h1>
  </div>

  <!-- Partie DROITE : Bouton dynamique (desktop) + "Join the Community" -->
  <div class="nav-right">
    <div class="desktop-right">
      {currentPath.includes('/about') ? (
        <HoverLink href="/blog" normal={BlogFlat.src} hover={Blog.src} alt="blog" />
      ) : currentPath.includes('/blog') ? (
        <HoverLink href="/about" normal={AboutFlat.src} hover={About.src} alt="about" />
      ) : (
        <HoverLink href="/blog" normal={BlogFlat.src} hover={Blog.src} alt="blog" />
      )}
    </div>
  </div>

 <div class="community-dropdown-container">
    <button id="join-community-btn" class="community-button">
      <div class="community-content">
        <span class="join-text">Join the community</span>
        <img class="close-icon hidden" src={CloseBtn.src} alt="Close" />
        <img class="logo-icon" src={Logo.src} alt="logo" />
      </div>
    </button>

    <!-- Dropdown Form -->
    <div id="community-dropdown" class="community-dropdown hidden">
      <ArtistFormModal user={user} isAuthenticated={!!user} />
    </div>
  </div></nav>

<style>
  /* Structure globale */
  .navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    margin: 0;
    padding: 0 1rem; /* Use padding instead of margin to keep full width */
    position: sticky;
    top: 0;
    height: 80px;
    background: white;
    z-index: 100;
    width: 100%;
    box-sizing: border-box;
  }

  .navbar::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: black;
  }

  /* Partie GAUCHE */
  .nav-left {
    display: flex;
    padding: 4px 2rem;
    flex: 0.3;
  }

  /* Boutons desktop */
  .desktop-left,
  .desktop-right {
    display: flex;
  }

  /* Boutons mobile - cachés par défaut */
  .mobile-buttons {
    display: none;
    gap: 1rem;
  }

  /* Partie CENTRE */
  .nav-center {
    align-items: start;
    font-weight: 500;
    font-size: 18px;
    flex: 1;
  }

  .nav-right {
    flex: 0.3;
  }

  /* Responsive */
  @media (max-width: 768px) {
    /* Cacher le centre sur mobile */
    .nav-center {
      display: none;
    }

    /* Cacher les boutons desktop */
    .desktop-left,
    .desktop-right {
      display: none;
    }

    /* Afficher les boutons mobile à gauche */
    .mobile-buttons {
      display: flex;
      gap: 0.5rem;
    }

    /* Ajuster la navbar mobile */
    .navbar {
      justify-content: space-between;
    }

    .nav-left {
      flex: 1;
      justify-content: flex-start;
    }

    .nav-right {
      flex: 0;
    }

    /* Ajuster le bouton community pour mobile */
    .community-button {
      width: auto !important;
      min-width: auto;
      font-size: 14px;
      padding: 4px 6px;
      white-space: nowrap;
      display: inline-flex;
      align-items: center;
    }

    /* Force full width when dropdown is open on mobile */
    .navbar.dropdown-open .community-dropdown-container .community-button {
      width: 100vw !important;
      padding: 0 !important;
      border-radius: 0 !important;
    }

    /* Ajuster le contenu du bouton community */
    .community-content {
      gap: 0.5rem;
      flex-direction: row;
      font-size: 14px;
    }

    /* Ajuster la taille du logo sur mobile */
    .community-button img {
      height: 30px;
      width: auto;
    }

    /* S'assurer que les boutons navigation gardent une taille décente */
    .mobile-buttons :global(a) {
      min-width: 40px;
      min-height: 40px;
    }

    .mobile-buttons :global(img) {
      height: 40px !important;
      width: auto;
    }
  }

  @media (max-width: 480px) {
    /* Pour très petits écrans */
    .community-button {
      font-size: 8px;
      min-width: auto;
      padding: 3px 4px;
      white-space: nowrap;
    }

    .community-button img {
      height: 25px;
    }

    .mobile-buttons {
      gap: 0.25rem;
    }
  }

  /* Boutons dynamiques */
  .nav-button {
    text-decoration: none;
    color: black;
  }
  .nav-button:hover {
    background: #f0f0f0;
  }

  /* Bouton "Join the Community" */
  .community-button {
    background: white;
    color: black;
    border: none;
    cursor: pointer;
    width: 30%;
    height: inherit;
    font-size: 22px;
    font-weight: 600;
    padding: 12px;
    position: relative;
    overflow: hidden;
    transition: color 0.6s ease, transform 0.2s ease;
  }

  .community-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(to right, #E9930F, #3E44E6, #8FD116);
    transition: left 0.6s ease;
    z-index: -1;
  }

  .community-button:hover::before {
    left: 0;
  }

  .community-button:hover {
    color: white;
    transform: translateY(-1px);
  }

  .community-button:hover .logo-icon {
    filter: brightness(0) invert(1);
  }

  /* No hover effect when dropdown is open (showing close icon) */
  .community-dropdown-container.dropdown-state .community-button:hover {
    transform: none;
  }

  .community-content {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 1rem;
  }

  .logo-icon {
    transition: filter 0.6s ease;
  }

  img {
    height: 50px;
  }

  /* Community Dropdown */
  .community-dropdown-container {
    position: relative;
    width: 30%;
    height: inherit;
    margin-right: -1rem; /* Extend to edge by compensating navbar padding */
  }

  .community-dropdown-container .community-button {
    width: 100% !important;
    height: 100% !important;
    min-width: auto !important;
    max-width: none !important;
    box-sizing: border-box;
  }

  .community-dropdown-container .community-content {
    width: 100%;
    height: 100%;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    gap: 1rem !important;
  }

  .community-dropdown-container .community-content img {
    vertical-align: middle;
    pointer-events: none;
  }

  .community-dropdown-container .logo-icon {
    height: 50px;
    width: auto;
  }

  .community-dropdown-container .close-icon {
    height: 40px;
    width: auto;
  }

  .community-dropdown-container .hidden {
    display: none;
  }

  .community-dropdown-container.dropdown-state .join-text,
  .community-dropdown-container.dropdown-state .logo-icon {
    display: none;
  }

  .community-dropdown-container.dropdown-state .close-icon {
    display: inline;
  }

  .community-dropdown {
    position: fixed;
    top: 80px;
    right: 0;
    /* Match the button width: 30% of viewport minus navbar padding */
    width: calc(30vw - 0.6rem);
    background: linear-gradient(to right, #E9930F, #3E44E6, #8FD116);
    border: none;
    border-radius: 0;
    z-index: 1000;
    height: calc(100vh - 80px);
    max-height: 100vh;
    overflow-y: auto;
  }

  .community-dropdown.hidden {
    display: none;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .navbar {
      height: 60px;
      margin: 0;
      padding: 0 0.5rem; /* Reduce padding on mobile */
    }

    /* Remove padding when dropdown is open to allow full width */
    .navbar.dropdown-open {
      padding: 0 !important;
    }

    /* Hide navbar bottom line when dropdown is open */
    .navbar.dropdown-open::after {
      display: none;
    }

    .navbar.dropdown-open .nav-left,
    .navbar.dropdown-open .nav-center,
    .navbar.dropdown-open .nav-right {
      display: none;
    }

    .navbar.dropdown-open .community-dropdown-container {
      width: 100%;
      display: flex;
      justify-content: center;
      margin-right: 0; /* Remove margin compensation on mobile */
      margin-left: 0;
    }

    .navbar.dropdown-open .community-button {
      width: 100vw !important;
    }

    .nav-left {
      padding: 0;
    }

    .community-dropdown {
      position: fixed;
      top: 60px;
      left: 0;
      right: 0;
      width: 100vw !important; /* Force full width on mobile */
      height: calc(100vh - 60px);
      z-index: 9999;
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    .community-dropdown-container {
      width: auto;
      position: static;
    }

    .community-dropdown-container {
      width: auto;
      position: static;
    }
  }
</style>


<script define:vars={{ currentPage }}>
  // Function to update navigation based on current page
  function updateNavigation() {
    const navLinks = document.querySelectorAll('.nav-link');
    const currentPath = window.location.pathname;
    
    // Determine current page from path
    let page = 'home';
    if (currentPath === '/map') page = 'map';
    else if (currentPath === '/blog' || currentPath.startsWith('/blog/')) page = 'blog';
    else if (currentPath === '/about') page = 'about';
    
    // Show/hide links based on current page
    navLinks.forEach(link => {
      const linkPage = link.getAttribute('data-page');
      if (linkPage === page) {
        link.style.display = 'none'; // Hide current page link
      } else {
        link.style.display = 'block'; // Show other links
      }
    });
  }
  
  // Update on initial load
  function initNavigation() {
    updateNavigation();
  }
  
  // Update on page changes (View Transitions)
  document.addEventListener('astro:page-load', updateNavigation);
  
  // Also run on initial load
  document.addEventListener('DOMContentLoaded', initNavigation);
  
  // Listen for successful authentication to show logout button
  function showLogoutButton() {
    const authButtons = document.querySelector('.flex.items-center.space-x-3');
    if (authButtons) {
      // Check if logout button already exists
      const existingLogout = authButtons.querySelector('a[href="/api/auth/logout"]');
      if (!existingLogout) {
        // Create logout button
        const logoutBtn = document.createElement('a');
        logoutBtn.href = '/api/auth/logout';
        logoutBtn.className = 'bg-gray-100 text-gray-700 px-4 py-2 rounded-lg text-sm font-medium hover:bg-gray-200 transition-colors';
        logoutBtn.textContent = 'Logout';
        authButtons.appendChild(logoutBtn);
      }
    }
  }
  
  // Listen for authSuccess event
  window.addEventListener('authSuccess', showLogoutButton);

  // Community Dropdown Logic
  function initCommunityDropdown() {
    const joinBtn = document.getElementById('join-community-btn');
    const dropdown = document.getElementById('community-dropdown');
    const dropdownContainer = document.querySelector('.community-dropdown-container');
    const navbar = document.querySelector('.navbar');

    if (!joinBtn || !dropdown || !dropdownContainer || !navbar) return;

    // Remove existing event listeners to prevent duplicates
    joinBtn.removeEventListener('click', joinBtn._dropdownToggle);

    console.log('🔄 Initializing community dropdown...');

    let isOpen = false;

    function openDropdown() {
      dropdown.classList.remove('hidden');
      navbar.classList.add('dropdown-open');
      dropdownContainer.classList.add('dropdown-state');
      // Change button style
      joinBtn.style.background = 'linear-gradient(to right, #E9930F, #3E44E6, #8FD116)';
      joinBtn.style.color = 'white';
      // Prevent body scroll
      document.body.style.overflow = 'hidden';
      isOpen = true;
    }

    function closeDropdown() {
      dropdown.classList.add('hidden');
      navbar.classList.remove('dropdown-open');
      dropdownContainer.classList.remove('dropdown-state');
      // Reset button style - remove inline styles to allow CSS hover to work
      joinBtn.style.background = '';
      joinBtn.style.color = '';
      // Restore body scroll
      document.body.style.overflow = '';
      isOpen = false;
    }

    function toggleDropdown() {
      if (isOpen) {
        closeDropdown();
      } else {
        openDropdown();
      }
    }

    // Button click handler - store reference for removal
    joinBtn._dropdownToggle = toggleDropdown;
    joinBtn.addEventListener('click', toggleDropdown);

    // Close when clicking outside
    document.addEventListener('click', function(e) {
      if (!e.target.closest('.community-dropdown-container')) {
        closeDropdown();
      }
    });

    // Close on escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && isOpen) {
        closeDropdown();
      }
    });
  }

  // Initialize dropdown
  document.addEventListener('DOMContentLoaded', function() {
    initNavigation();
    initCommunityDropdown();
  });

  // Re-initialize on Astro page transitions
  document.addEventListener('astro:page-load', function() {
    initNavigation();
    initCommunityDropdown();
  });

  // Fallback for immediate execution
  if (document.readyState !== 'loading') {
    initNavigation();
    initCommunityDropdown();
  }
</script>