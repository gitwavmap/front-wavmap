---
import Layout from '../layouts/Layout.astro';
import * as m from '../paraglide/messages.js';
---

<Layout title={m.forgotPassword ? m.forgotPassword({}, { locale: 'en' }) : 'Forgot Password'}>
  <main class="min-h-screen flex items-center justify-center px-4" style="background: linear-gradient(to right, #8FD116, #3E44E6 50%, #E9930F 80%, #E92C0F 100%);">
    <div class="max-w-md w-full">
      <div class="bg-white p-8 border-4 border-black shadow-[8px_8px_0px_0px_rgba(0,0,0,1)]">
        <div class="text-center mb-8">
          <h1 class="text-3xl font-black text-black mb-2 uppercase tracking-wider">
            {m.forgotPassword ? m.forgotPassword({}, { locale: 'en' }) : 'Forgot Password'}
          </h1>
          <p class="text-black font-bold">
            {m.forgotPasswordSubtitle ? m.forgotPasswordSubtitle({}, { locale: 'en' }) : 'Enter your email address and we\'ll send you a reset link'}
          </p>
        </div>

        <div id="form-container">
          <form id="forgot-password-form" class="space-y-6">
            <div>
              <label for="email" class="block text-sm font-black text-black mb-2 uppercase tracking-wide">
                {m.email ? m.email({}, { locale: 'en' }) : 'Email'}
              </label>
              <input
                type="email"
                id="email"
                name="email"
                required
                class="w-full px-4 py-3 border-4 border-black bg-transparent font-bold text-black focus:outline-none focus:shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] focus:transform focus:translate-x-[-2px] focus:translate-y-[-2px] transition-all"
                placeholder={m.enterEmail ? m.enterEmail({}, { locale: 'en' }) : 'Enter your email'}
              />
            </div>

            <button
              type="submit"
              id="submit-btn"
              class="w-full bg-black text-white py-3 px-4 border-4 border-black font-black uppercase tracking-wide hover:bg-white hover:text-black hover:shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] hover:transform hover:translate-x-[-2px] hover:translate-y-[-2px] transition-all disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span id="btn-text">
                {m.sendResetLink ? m.sendResetLink({}, { locale: 'en' }) : 'Send Reset Link'}
              </span>
              <span id="btn-loading" class="hidden">
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                {m.sending ? m.sending({}, { locale: 'en' }) : 'Sending...'}
              </span>
            </button>

            <div class="text-center">
              <a href="/map" class="text-black hover:underline text-sm font-bold uppercase tracking-wide">
                {m.backToLogin ? m.backToLogin({}, { locale: 'en' }) : 'Back to Login'}
              </a>
            </div>
          </form>

          <div id="success-message" class="hidden text-center">
            <div class="text-green-600 mb-4">
              <svg class="w-16 h-16 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 mb-2">
              {m.checkYourEmail ? m.checkYourEmail({}, { locale: 'en' }) : 'Check your email'}
            </h3>
            <p class="text-gray-600 mb-6">
              {m.resetLinkSent ? m.resetLinkSent({}, { locale: 'en' }) : 'We\'ve sent a password reset link to your email address.'}
            </p>
            <div class="space-y-2">
              <a href="/map" class="block w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors">
                {m.backToLogin ? m.backToLogin({}, { locale: 'en' }) : 'Back to Login'}
              </a>
              <button 
                id="resend-btn"
                class="block w-full bg-gray-100 text-gray-700 py-3 px-4 rounded-lg font-medium hover:bg-gray-200 transition-colors"
              >
                {m.resendEmail ? m.resendEmail({}, { locale: 'en' }) : 'Resend Email'}
              </button>
            </div>
          </div>
        </div>

        <div id="error-message" class="hidden mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div class="flex">
            <svg class="w-5 h-5 text-red-400 mr-3 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
            </svg>
            <p class="text-sm text-red-600" id="error-text"></p>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  const form = document.getElementById('forgot-password-form') as HTMLFormElement;
  const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
  const btnText = document.getElementById('btn-text');
  const btnLoading = document.getElementById('btn-loading');
  const formContainer = document.getElementById('form-container');
  const successMessage = document.getElementById('success-message');
  const errorMessage = document.getElementById('error-message');
  const errorText = document.getElementById('error-text');
  const resendBtn = document.getElementById('resend-btn');

  let currentEmail = '';

  function showLoading() {
    submitBtn.disabled = true;
    btnText?.classList.add('hidden');
    btnLoading?.classList.remove('hidden');
  }

  function hideLoading() {
    submitBtn.disabled = false;
    btnText?.classList.remove('hidden');
    btnLoading?.classList.add('hidden');
  }

  function showError(message: string) {
    if (errorText) errorText.textContent = message;
    errorMessage?.classList.remove('hidden');
  }

  function hideError() {
    errorMessage?.classList.add('hidden');
  }

  function showSuccess() {
    form.classList.add('hidden');
    successMessage?.classList.remove('hidden');
  }

  async function sendResetEmail(email: string) {
    try {
      showLoading();
      hideError();

      const response = await fetch('/api/auth/forgot-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          email,
          resetUrl: `${window.location.origin}/reset-password`
        })
      });

      const data = await response.json();

      if (response.ok) {
        currentEmail = email;
        showSuccess();
      } else {
        showError(data.error || 'Failed to send reset email. Please try again.');
      }
    } catch (error) {
      console.error('Forgot password error:', error);
      showError('Network error. Please try again.');
    } finally {
      hideLoading();
    }
  }

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const email = formData.get('email') as string;
    
    if (!email) {
      showError('Please enter your email address.');
      return;
    }

    await sendResetEmail(email);
  });

  resendBtn?.addEventListener('click', () => {
    if (currentEmail) {
      sendResetEmail(currentEmail);
    }
  });
</script>