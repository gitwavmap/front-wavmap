---
import Layout from '../layouts/Layout.astro';
import * as m from '../paraglide/messages.js';
---

<Layout title={m.resetPassword ? m.resetPassword({}, { locale: 'en' }) : 'Reset Password'} noindex={true}>
  <main class="min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 px-4">
    <div class="max-w-md w-full">
      <div class="bg-black/40 backdrop-blur-sm rounded-2xl shadow-2xl p-8 border-2 border-white/20">
        <div class="text-center mb-8">
          <h1 class="text-3xl font-bold text-white mb-2 uppercase tracking-wider">
            {m.resetPassword ? m.resetPassword({}, { locale: 'en' }) : 'Reset Password'}
          </h1>
          <p class="text-gray-300 font-medium">
            {m.resetPasswordSubtitle ? m.resetPasswordSubtitle({}, { locale: 'en' }) : 'Enter your new password below'}
          </p>
        </div>

        <div id="loading-state">
          <div class="flex flex-col items-center">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-white mb-4"></div>
            <p class="text-gray-300 font-medium">
              {m.validatingToken ? m.validatingToken({}, { locale: 'en' }) : 'Validating reset token...'}
            </p>
          </div>
        </div>

        <div id="form-container" class="hidden">
          <form id="reset-password-form" class="space-y-6">
            <div>
              <label for="password" class="block text-sm font-bold text-white mb-2 uppercase tracking-wide">
                {m.newPassword ? m.newPassword({}, { locale: 'en' }) : 'New Password'}
              </label>
              <input
                type="password"
                id="password"
                name="password"
                required
                minlength="8"
                class="w-full px-4 py-3 border-2 border-white/30 bg-white/10 text-white rounded-lg focus:ring-2 focus:ring-white/50 focus:border-white transition-all placeholder-gray-300"
                placeholder={m.enterNewPassword ? m.enterNewPassword({}, { locale: 'en' }) : 'Enter new password'}
              />
              <div id="password-requirements" class="mt-2 text-sm text-gray-300">
                <p class="font-bold mb-1 text-white uppercase tracking-wide">Password must contain:</p>
                <ul class="space-y-1">
                  <li id="req-length" class="flex items-center">
                    <span class="requirement-icon">✗</span>
                    <span class="ml-2">At least 8 characters</span>
                  </li>
                  <li id="req-letters" class="flex items-center">
                    <span class="requirement-icon">✗</span>
                    <span class="ml-2">At least one letter</span>
                  </li>
                  <li id="req-numbers" class="flex items-center">
                    <span class="requirement-icon">✗</span>
                    <span class="ml-2">At least one number</span>
                  </li>
                  <li id="req-special" class="flex items-center">
                    <span class="requirement-icon">✗</span>
                    <span class="ml-2">At least one special character</span>
                  </li>
                </ul>
              </div>
            </div>

            <div>
              <label for="confirmPassword" class="block text-sm font-bold text-white mb-2 uppercase tracking-wide">
                {m.confirmPassword ? m.confirmPassword({}, { locale: 'en' }) : 'Confirm Password'}
              </label>
              <input
                type="password"
                id="confirmPassword"
                name="confirmPassword"
                required
                minlength="8"
                class="w-full px-4 py-3 border-2 border-white/30 bg-white/10 text-white rounded-lg focus:ring-2 focus:ring-white/50 focus:border-white transition-all placeholder-gray-300"
                placeholder={m.confirmNewPassword ? m.confirmNewPassword({}, { locale: 'en' }) : 'Confirm new password'}
              />
            </div>

            <button
              type="submit"
              id="submit-btn"
              class="w-full bg-white text-black py-3 px-4 rounded-lg font-bold hover:bg-gray-100 focus:ring-2 focus:ring-white/50 transition-all disabled:opacity-50 disabled:cursor-not-allowed uppercase tracking-wider border-2 border-white"
            >
              <span id="btn-text">
                {m.resetPassword ? m.resetPassword({}, { locale: 'en' }) : 'Reset Password'}
              </span>
              <span id="btn-loading" class="hidden">
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                {m.resetting ? m.resetting({}, { locale: 'en' }) : 'Resetting...'}
              </span>
            </button>
          </form>
        </div>

        <div id="success-message" class="hidden text-center">
          <div class="text-green-400 mb-4">
            <svg class="w-16 h-16 mx-auto" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
            </svg>
          </div>
          <h3 class="text-lg font-bold text-white mb-2 uppercase tracking-wider">
            {m.passwordResetSuccess ? m.passwordResetSuccess({}, { locale: 'en' }) : 'Password Reset Successful'}
          </h3>
          <p class="text-gray-300 mb-6 font-medium">
            {m.passwordResetSuccessMessage ? m.passwordResetSuccessMessage({}, { locale: 'en' }) : 'Your password has been successfully updated. You can now log in with your new password.'}
          </p>
          <a href="/map" class="block w-full bg-white text-black py-3 px-4 rounded-lg font-bold hover:bg-gray-100 transition-all uppercase tracking-wider border-2 border-white">
            {m.goToLogin ? m.goToLogin({}, { locale: 'en' }) : 'Go to Login'}
          </a>
        </div>

        <div id="error-state" class="hidden text-center">
          <div class="text-red-400 mb-4">
            <svg class="w-16 h-16 mx-auto" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
            </svg>
          </div>
          <h3 class="text-lg font-bold text-red-400 mb-2 uppercase tracking-wider" id="error-title">
            {m.invalidOrExpiredLink ? m.invalidOrExpiredLink({}, { locale: 'en' }) : 'Invalid or Expired Link'}
          </h3>
          <p class="text-gray-300 mb-6 font-medium" id="error-message-text">
            {m.resetLinkExpired ? m.resetLinkExpired({}, { locale: 'en' }) : 'This password reset link is invalid or has expired. Please request a new one.'}
          </p>
          <div class="space-y-2">
            <a href="/forgot-password" class="block w-full bg-white text-black py-3 px-4 rounded-lg font-bold hover:bg-gray-100 transition-all uppercase tracking-wider border-2 border-white">
              {m.requestNewLink ? m.requestNewLink({}, { locale: 'en' }) : 'Request New Link'}
            </a>
            <a href="/map" class="block w-full bg-transparent text-white py-3 px-4 rounded-lg font-bold hover:bg-white/10 transition-all uppercase tracking-wider border-2 border-white/30">
              {m.backToLogin ? m.backToLogin({}, { locale: 'en' }) : 'Back to Login'}
            </a>
          </div>
        </div>

        <div id="form-error-message" class="hidden mt-4 p-4 bg-red-500/20 border-2 border-red-400 rounded-lg">
          <div class="flex">
            <svg class="w-5 h-5 text-red-400 mr-3 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
            </svg>
            <p class="text-sm text-red-400 font-medium" id="form-error-text"></p>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  .requirement-icon {
    color: #ef4444;
    font-weight: bold;
    font-size: 14px;
    min-width: 16px;
    text-align: center;
  }

  .requirement-met {
    color: #22c55e;
  }

  .requirement-met .requirement-icon {
    color: #22c55e;
  }

  .requirement-met .requirement-icon::before {
    content: "✓";
  }

  .password-strength-bar {
    height: 4px;
    background: #e5e7eb;
    border-radius: 2px;
    overflow: hidden;
    margin-top: 8px;
  }

  .password-strength-fill {
    height: 100%;
    transition: all 0.3s ease;
    border-radius: 2px;
  }

  .strength-weak {
    background: #ef4444;
    width: 25%;
  }

  .strength-medium {
    background: #f59e0b;
    width: 60%;
  }

  .strength-strong {
    background: #22c55e;
    width: 100%;
  }
</style>

<script>
  const loadingState = document.getElementById('loading-state');
  const formContainer = document.getElementById('form-container');
  const successMessage = document.getElementById('success-message');
  const errorState = document.getElementById('error-state');
  const errorTitle = document.getElementById('error-title');
  const errorMessageText = document.getElementById('error-message-text');
  const formErrorMessage = document.getElementById('form-error-message');
  const formErrorText = document.getElementById('form-error-text');

  const form = document.getElementById('reset-password-form') as HTMLFormElement;
  const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
  const btnText = document.getElementById('btn-text');
  const btnLoading = document.getElementById('btn-loading');
  const passwordInput = document.getElementById('password') as HTMLInputElement;
  const confirmPasswordInput = document.getElementById('confirmPassword') as HTMLInputElement;

  let resetToken = '';

  function showState(state: 'loading' | 'form' | 'success' | 'error') {
    loadingState?.classList.toggle('hidden', state !== 'loading');
    formContainer?.classList.toggle('hidden', state !== 'form');
    successMessage?.classList.toggle('hidden', state !== 'success');
    errorState?.classList.toggle('hidden', state !== 'error');
  }

  function showFormLoading() {
    submitBtn.disabled = true;
    btnText?.classList.add('hidden');
    btnLoading?.classList.remove('hidden');
  }

  function hideFormLoading() {
    submitBtn.disabled = false;
    btnText?.classList.remove('hidden');
    btnLoading?.classList.add('hidden');
  }

  function showFormError(message: string) {
    if (formErrorText) formErrorText.textContent = message;
    formErrorMessage?.classList.remove('hidden');
  }

  function hideFormError() {
    formErrorMessage?.classList.add('hidden');
  }

  function showError(title: string, message: string) {
    if (errorTitle) errorTitle.textContent = title;
    if (errorMessageText) errorMessageText.textContent = message;
    showState('error');
  }

  function validatePassword(password: string) {
    const errors = [];

    if (password.length < 8) {
      errors.push('at least 8 characters');
    }

    if (!/[a-zA-Z]/.test(password)) {
      errors.push('at least one letter');
    }

    if (!/\d/.test(password)) {
      errors.push('at least one number');
    }

    if (!/[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)) {
      errors.push('at least one special character');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  function updatePasswordRequirements(password: string) {
    const requirements = {
      length: password.length >= 8,
      letters: /[a-zA-Z]/.test(password),
      numbers: /\d/.test(password),
      special: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)
    };

    const reqLength = document.getElementById('req-length');
    const reqLetters = document.getElementById('req-letters');
    const reqNumbers = document.getElementById('req-numbers');
    const reqSpecial = document.getElementById('req-special');

    if (reqLength) {
      reqLength.className = requirements.length ? 'flex items-center requirement-met' : 'flex items-center';
      reqLength.querySelector('.requirement-icon')!.textContent = requirements.length ? '✓' : '✗';
    }

    if (reqLetters) {
      reqLetters.className = requirements.letters ? 'flex items-center requirement-met' : 'flex items-center';
      reqLetters.querySelector('.requirement-icon')!.textContent = requirements.letters ? '✓' : '✗';
    }

    if (reqNumbers) {
      reqNumbers.className = requirements.numbers ? 'flex items-center requirement-met' : 'flex items-center';
      reqNumbers.querySelector('.requirement-icon')!.textContent = requirements.numbers ? '✓' : '✗';
    }

    if (reqSpecial) {
      reqSpecial.className = requirements.special ? 'flex items-center requirement-met' : 'flex items-center';
      reqSpecial.querySelector('.requirement-icon')!.textContent = requirements.special ? '✓' : '✗';
    }
  }

  function validatePasswords(): boolean {
    const password = passwordInput.value;
    const confirmPassword = confirmPasswordInput.value;

    const validation = validatePassword(password);

    if (!validation.isValid) {
      showFormError(`Password must contain ${validation.errors.join(', ')}.`);
      return false;
    }

    if (password !== confirmPassword) {
      showFormError('Passwords do not match.');
      return false;
    }

    return true;
  }

  async function resetPassword(token: string, password: string) {
    try {
      showFormLoading();
      hideFormError();

      const response = await fetch('/api/auth/reset-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ token, password })
      });

      const data = await response.json();

      if (response.ok) {
        showState('success');
      } else {
        showFormError(data.error || 'Failed to reset password. Please try again.');
      }
    } catch (error) {
      console.error('Reset password error:', error);
      showFormError('Network error. Please try again.');
    } finally {
      hideFormLoading();
    }
  }

  function init() {
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');

    if (!token) {
      showError('Invalid Link', 'This password reset link is missing required information.');
      return;
    }

    resetToken = token;
    showState('form');
  }

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (!validatePasswords()) {
      return;
    }

    const password = passwordInput.value;
    await resetPassword(resetToken, password);
  });

  // Real-time password validation
  passwordInput?.addEventListener('input', () => {
    const password = passwordInput.value;
    updatePasswordRequirements(password);
  });

  confirmPasswordInput?.addEventListener('input', () => {
    const password = passwordInput.value;
    const confirmPassword = confirmPasswordInput.value;

    if (confirmPassword && password !== confirmPassword) {
      confirmPasswordInput.setCustomValidity('Passwords do not match');
    } else {
      confirmPasswordInput.setCustomValidity('');
    }
  });

  // Initialize when page loads
  init();
</script>