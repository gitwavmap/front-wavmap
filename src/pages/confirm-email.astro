---
import Layout from '../layouts/Layout.astro';
import * as m from '../paraglide/messages.js';
import { PUBLIC_DIRECTUS_URL } from 'astro:env/client';
---

<Layout title={m.emailConfirmation ? m.emailConfirmation() : 'Email Confirmation'}>
  <main class="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 px-4">
    <div class="max-w-md w-full">
      <div class="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl p-8 border border-white/20">
        <div class="text-center">
          <h1 class="text-3xl font-bold text-gray-900 mb-6">
            {m.emailConfirmation ? m.emailConfirmation() : 'Email Confirmation'}
          </h1>
          
          <div id="confirmation-content">
            <div id="loading-state" class="flex flex-col items-center">
              <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4"></div>
              <p class="text-gray-600">
                {m.confirmingEmail ? m.confirmingEmail() : 'Confirming your email...'}
              </p>
            </div>
            
            <div id="success-state" class="hidden">
              <div class="text-green-600 mb-4">
                <svg class="w-16 h-16 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
              </div>
              <p class="text-green-600 font-semibold text-lg mb-2">
                {m.emailConfirmed ? m.emailConfirmed() : 'Email confirmed!'}
              </p>
              <p class="text-gray-600">
                {m.redirectingToLogin ? m.redirectingToLogin() : 'Redirecting to login...'}
              </p>
            </div>
            
            <div id="error-state" class="hidden">
              <div class="text-red-600 mb-4">
                <svg class="w-16 h-16 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                </svg>
              </div>
              <p class="text-red-600 font-semibold text-lg mb-4" id="error-message">
                {m.invalidOrExpiredLink ? m.invalidOrExpiredLink() : 'Invalid or expired link'}
              </p>
              <div class="space-y-2">
                <a 
                  href="/register" 
                  class="block w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors"
                >
                  {m.backToRegister ? m.backToRegister() : 'Back to Register'}
                </a>
                <button 
                  id="retry-btn"
                  class="block w-full bg-gray-100 text-gray-700 py-3 px-4 rounded-lg font-medium hover:bg-gray-200 transition-colors"
                >
                  {m.tryAgain ? m.tryAgain() : 'Try Again'}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { PUBLIC_DIRECTUS_URL } from 'astro:env/client';

  const loadingState = document.getElementById('loading-state');
  const successState = document.getElementById('success-state');
  const errorState = document.getElementById('error-state');
  const errorMessage = document.getElementById('error-message');
  const retryBtn = document.getElementById('retry-btn');

  let currentToken = '';

  function showState(state: 'loading' | 'success' | 'error') {
    loadingState?.classList.toggle('hidden', state !== 'loading');
    successState?.classList.toggle('hidden', state !== 'success');
    errorState?.classList.toggle('hidden', state !== 'error');
  }

  async function confirmEmail(token: string) {
    try {
      showState('loading');
      
      // Try using Directus SDK approach via an API endpoint
      const response = await fetch('/api/auth/verify-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ token })
      });
      
      if (response.ok) {
        showState('success');
        
        // Redirect to login after 2 seconds
        setTimeout(() => {
          window.location.href = '/map?confirmed=true';
        }, 2000);
      } else {
        const errorData = await response.json().catch(() => ({}));
        
        if (errorMessage) {
          errorMessage.textContent = errorData.message || 
            (response.status === 400 || response.status === 401 
              ? 'Invalid or expired link' 
              : 'Please try again');
        }
        
        showState('error');
      }
    } catch (error) {
      console.error('Email confirmation error:', error);
      
      if (errorMessage) {
        errorMessage.textContent = 'Please try again';
      }
      
      showState('error');
    }
  }

  function init() {
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');
    
    if (!token) {
      if (errorMessage) {
        errorMessage.textContent = 'Invalid or expired link';
      }
      showState('error');
      return;
    }
    
    currentToken = token;
    confirmEmail(token);
  }

  // Retry button functionality
  retryBtn?.addEventListener('click', () => {
    if (currentToken) {
      confirmEmail(currentToken);
    }
  });

  // Initialize when page loads
  init();
</script>