globalThis.process ??= {}; globalThis.process.env ??= {};
/* empty css                                 */
import { c as createComponent, a as renderTemplate, b as renderScript, f as defineScriptVars, e as addAttribute, m as maybeRenderHead, r as renderComponent } from '../chunks/astro/server_DT6E8k0k.mjs';
import { $ as $$Layout } from '../chunks/Layout_DZ88bLxA.mjs';
import { g as getLocale } from '../chunks/runtime_DSWkPTzG.mjs';
import { c as createSvgComponent, $ as $$Navbar } from '../chunks/Navbar_CW1GVZKe.mjs';
/* empty css                               */
import { $ as $$Footer } from '../chunks/Footer_CqfJwBpE.mjs';
export { renderers } from '../renderers.mjs';

// eslint-disable

/** @type {(inputs: {}) => string} */
const artist_map_title$3 = () => `Artist Community Map`;

// eslint-disable

/** @type {(inputs: {}) => string} */
const artist_map_title$2 = () => `Carte de la Communauté d'Artistes`;

// eslint-disable

/** @type {(inputs: {}) => string} */
const artist_map_title$1 = () => `Mapa de la Comunidad de Artistas`;

// eslint-disable

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "fr" | "es" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const artist_map_title = (inputs= {}, options = {}) => {
	const locale = options.locale ?? getLocale();
	if (locale === "en") return artist_map_title$3()
	if (locale === "fr") return artist_map_title$2()
	if (locale === "es") return artist_map_title$1()
	return "artist_map_title"
};

// eslint-disable

/** @type {(inputs: {}) => string} */
const artist_map_description$3 = () => `Discover artists from the underground music community around the world`;

// eslint-disable

/** @type {(inputs: {}) => string} */
const artist_map_description$2 = () => `Découvrez les artistes de la communauté musicale underground à travers le monde`;

// eslint-disable

/** @type {(inputs: {}) => string} */
const artist_map_description$1 = () => `Descubre artistas de la comunidad musical underground de todo el mundo`;

// eslint-disable

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "fr" | "es" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const artist_map_description = (inputs= {}, options = {}) => {
	const locale = options.locale ?? getLocale();
	if (locale === "en") return artist_map_description$3()
	if (locale === "fr") return artist_map_description$2()
	if (locale === "es") return artist_map_description$1()
	return "artist_map_description"
};

const MAPBOX_ACCESS_TOKEN = "pk.eyJ1Ijoid2F2bWFwIiwiYSI6ImNtY2huc3I1ajB4ZzcybXF4cWEzdXlkbG4ifQ.Szzm5T0oYElXQwPq6GO4Sw";

const ShuffleBtn = createSvgComponent({"meta":{"src":"/_astro/shuffle_btn.eSYDYYlZ.svg","width":269,"height":93,"format":"svg"},"attributes":{"width":"269","height":"93","viewBox":"0 0 269 93","fill":"none"},"children":"\n<path d=\"M236.222 2H222.835V17.6366L192.057 2H178.665V17.6366L147.887 2H134.5V17.6366L103.722 2H90.3352V17.6366L59.5572 2H46.1648V17.6366L15.3867 2H2V75.3634L32.7781 91H46.1648V75.3634L76.9485 91H90.3352V75.3634L121.113 91H134.5V75.3634L165.278 91H178.665V75.3634L209.449 91H222.835V75.3634L253.613 91H267V17.6366L236.222 2Z\" fill=\"#F5F5F5\" stroke=\"black\" stroke-width=\"3.98933\" stroke-miterlimit=\"10\" />\n<path d=\"M62.3743 50.534H66.3863C66.4769 51.3953 66.6809 52.1773 66.9983 52.88C67.3383 53.56 67.7803 54.138 68.3243 54.614C68.8683 55.09 69.5143 55.4527 70.2623 55.702C71.0103 55.9287 71.8603 56.042 72.8123 56.042C73.6056 56.042 74.3196 55.9627 74.9543 55.804C75.6116 55.6453 76.1556 55.4073 76.5863 55.09C77.0396 54.75 77.3796 54.3533 77.6063 53.9C77.8556 53.424 77.9803 52.9027 77.9803 52.336C77.9803 51.656 77.8329 51.1007 77.5383 50.67C77.2436 50.2167 76.8129 49.8427 76.2463 49.548C75.7023 49.2533 75.0336 49.0153 74.2403 48.834C73.4469 48.63 72.5629 48.426 71.5883 48.222C70.4323 47.9953 69.3329 47.7347 68.2903 47.44C67.2476 47.1453 66.3296 46.7487 65.5363 46.25C64.7429 45.7513 64.1083 45.1167 63.6323 44.346C63.1563 43.5527 62.9183 42.5553 62.9183 41.354C62.9183 40.2887 63.1223 39.3253 63.5303 38.464C63.9383 37.58 64.5163 36.832 65.2643 36.22C66.0349 35.5853 66.9643 35.098 68.0523 34.758C69.1629 34.418 70.3983 34.248 71.7583 34.248C73.2769 34.248 74.6256 34.4633 75.8043 34.894C76.9829 35.3247 77.9803 35.914 78.7963 36.662C79.6349 37.41 80.2923 38.3053 80.7683 39.348C81.2443 40.368 81.5163 41.4787 81.5843 42.68H77.5723C77.4816 41.9547 77.2889 41.286 76.9943 40.674C76.7223 40.062 76.3369 39.5293 75.8383 39.076C75.3396 38.6227 74.7389 38.2713 74.0363 38.022C73.3563 37.7727 72.5856 37.648 71.7243 37.648C71.0216 37.648 70.3756 37.7387 69.7863 37.92C69.1969 38.0787 68.6869 38.328 68.2563 38.668C67.8483 38.9853 67.5309 39.3593 67.3043 39.79C67.0776 40.2207 66.9643 40.708 66.9643 41.252C66.9643 41.8867 67.1229 42.4193 67.4403 42.85C67.7803 43.258 68.2223 43.598 68.7663 43.87C69.3329 44.142 69.9903 44.3687 70.7383 44.55C71.4863 44.7313 72.2909 44.9127 73.1523 45.094C74.3989 45.3433 75.5549 45.6267 76.6203 45.944C77.7083 46.2387 78.6489 46.6467 79.4423 47.168C80.2583 47.6893 80.8816 48.3467 81.3123 49.14C81.7656 49.9333 81.9923 50.9307 81.9923 52.132C81.9923 53.2653 81.7656 54.2853 81.3123 55.192C80.8816 56.0987 80.2583 56.8693 79.4423 57.504C78.6263 58.116 77.6516 58.592 76.5183 58.932C75.3849 59.272 74.1383 59.442 72.7783 59.442C71.1689 59.442 69.7296 59.2267 68.4603 58.796C67.2136 58.3653 66.1483 57.7533 65.2643 56.96C64.3803 56.1667 63.6889 55.226 63.1903 54.138C62.6916 53.05 62.4196 51.8487 62.3743 50.534ZM84.3486 59V34.69H88.2246V45.06H100.023V34.69H103.933V59H100.023V48.46H88.2246V59H84.3486ZM107.293 50.33V34.69H111.169V50.194C111.169 52.0527 111.69 53.492 112.733 54.512C113.798 55.532 115.294 56.042 117.221 56.042C119.147 56.042 120.632 55.532 121.675 54.512C122.717 53.492 123.239 52.0527 123.239 50.194V34.69H127.149V50.33C127.149 51.7353 126.911 53.0047 126.435 54.138C125.959 55.2487 125.29 56.2007 124.429 56.994C123.59 57.7647 122.559 58.3653 121.335 58.796C120.111 59.2267 118.739 59.442 117.221 59.442C115.679 59.442 114.297 59.2267 113.073 58.796C111.871 58.3653 110.84 57.7647 109.979 56.994C109.117 56.2007 108.449 55.2487 107.973 54.138C107.519 53.0047 107.293 51.7353 107.293 50.33ZM130.468 59V34.69H146.856V38.09H134.344V45.468H146.312V48.8H134.344V59H130.468ZM149.394 59V34.69H165.782V38.09H153.27V45.468H165.238V48.8H153.27V59H149.394ZM168.319 59V34.69H172.195V55.6H184.537V59H168.319ZM187.079 59V34.69H203.807V38.09H190.955V45.128H203.229V48.46H190.955V55.6H203.977V59H187.079Z\" fill=\"#020202\" />\n"});

const CityBtn = createSvgComponent({"meta":{"src":"/_astro/city.BIUI6Ffm.svg","width":130,"height":68,"format":"svg"},"attributes":{"width":"130","height":"68","viewBox":"0 0 130 68","fill":"none"},"children":"\n<path d=\"M13.1793 2H2V52.9673L25.0573 66H36.9353V54.5964L54.8688 66H66.7468V54.5964L84.2144 66H96.3253V54.5964L116.821 66H128V14.3345L103.079 2H91.9002V11.0764L72.3364 2H60.9242V11.0764L42.9908 2H31.3457V11.0764L13.1793 2Z\" fill=\"black\" stroke=\"black\" stroke-width=\"4\" />\n<path d=\"M13.1793 2H2V52.9673L25.0573 66H36.9353V54.5964L54.8688 66H66.7468V54.5964L84.2144 66H96.3253V54.5964L116.821 66H128V14.3345L103.079 2H91.9002V11.0764L72.3364 2H60.9242V11.0764L42.9908 2H31.3457V11.0764L13.1793 2Z\" fill=\"#F6F6F6\" stroke=\"black\" stroke-width=\"4\" />\n<path d=\"M28.6649 33.862C28.6649 31.9353 28.9369 30.2013 29.4809 28.66C30.0249 27.096 30.7956 25.77 31.7929 24.682C32.8129 23.594 34.0369 22.7553 35.4649 22.166C36.8929 21.554 38.4909 21.248 40.2589 21.248C41.7549 21.248 43.1262 21.4633 44.3729 21.894C45.6422 22.302 46.7529 22.9027 47.7049 23.696C48.6569 24.4893 49.4616 25.464 50.1189 26.62C50.7762 27.776 51.2409 29.0907 51.5129 30.564H47.3989C46.9682 28.6827 46.1296 27.232 44.8829 26.212C43.6362 25.1693 42.0722 24.648 40.1909 24.648C39.0802 24.648 38.0602 24.8633 37.1309 25.294C36.2016 25.7247 35.4082 26.3367 34.7509 27.13C34.0936 27.9233 33.5836 28.8867 33.2209 30.02C32.8582 31.1307 32.6769 32.4113 32.6769 33.862C32.6769 35.2673 32.8582 36.5367 33.2209 37.67C33.5836 38.8033 34.0936 39.7667 34.7509 40.56C35.4082 41.3533 36.2016 41.9653 37.1309 42.396C38.0602 42.8267 39.1029 43.042 40.2589 43.042C42.2082 43.042 43.8062 42.4867 45.0529 41.376C46.3222 40.2427 47.1382 38.6447 47.5009 36.582H51.6149C51.3882 38.146 50.9576 39.54 50.3229 40.764C49.6882 41.9653 48.8722 42.9853 47.8749 43.824C46.9002 44.6627 45.7669 45.3087 44.4749 45.762C43.1829 46.2153 41.7662 46.442 40.2249 46.442C38.4796 46.442 36.8929 46.1473 35.4649 45.558C34.0369 44.9687 32.8129 44.13 31.7929 43.042C30.7956 41.954 30.0249 40.6393 29.4809 39.098C28.9369 37.5567 28.6649 35.8113 28.6649 33.862ZM54.282 46V21.69H58.158V46H54.282ZM68.2523 46V25.09H60.4323V21.69H79.9483V25.09H72.1283V46H68.2523ZM89.7395 46V36.786L80.7635 21.69H85.2175L91.6775 33.114L98.1375 21.69H102.592L93.6155 36.786V46H89.7395Z\" fill=\"black\" />\n"});

const CountryBtn = createSvgComponent({"meta":{"src":"/_astro/country.CogZKCnY.svg","width":191,"height":68,"format":"svg"},"attributes":{"width":"191","height":"68","viewBox":"0 0 191 68","fill":"none"},"children":"\n<path d=\"M13.2161 2H2V53.9944L23.0302 66H35.8819V56.1288L53.1734 66H67.1935V56.1288L84.4849 66H99.6734V56.1288L116.965 66H129.349V56.1288L146.641 66H159.025V56.1288L176.317 66H188V15.4729L164.399 2H152.189V11.704L135.191 2H123.274V12.5382L104.814 2H92.196V11.2419L72.1005 2H60.8844V11.2419L43.1256 2H31.4422V11.2419L13.2161 2Z\" fill=\"black\" stroke=\"black\" stroke-width=\"4\" />\n<path d=\"M13.2161 2H2V53.9944L23.0302 66H35.8819V56.1288L53.1734 66H67.1935V56.1288L84.4849 66H99.6734V56.1288L116.965 66H129.349V56.1288L146.641 66H159.025V56.1288L176.317 66H188V15.4729L164.399 2H152.189V11.704L135.191 2H123.274V12.5382L104.814 2H92.196V11.2419L72.1005 2H60.8844V11.2419L43.1256 2H31.4422V11.2419L13.2161 2Z\" fill=\"#F6F6F6\" stroke=\"black\" stroke-width=\"4\" />\n<path d=\"M17.1004 33.862C17.1004 31.9353 17.3724 30.2013 17.9164 28.66C18.4604 27.096 19.2311 25.77 20.2284 24.682C21.2484 23.594 22.4724 22.7553 23.9004 22.166C25.3284 21.554 26.9264 21.248 28.6944 21.248C30.1904 21.248 31.5618 21.4633 32.8084 21.894C34.0778 22.302 35.1884 22.9027 36.1404 23.696C37.0924 24.4893 37.8971 25.464 38.5544 26.62C39.2118 27.776 39.6764 29.0907 39.9484 30.564H35.8344C35.4038 28.6827 34.5651 27.232 33.3184 26.212C32.0718 25.1693 30.5078 24.648 28.6264 24.648C27.5158 24.648 26.4958 24.8633 25.5664 25.294C24.6371 25.7247 23.8438 26.3367 23.1864 27.13C22.5291 27.9233 22.0191 28.8867 21.6564 30.02C21.2938 31.1307 21.1124 32.4113 21.1124 33.862C21.1124 35.2673 21.2938 36.5367 21.6564 37.67C22.0191 38.8033 22.5291 39.7667 23.1864 40.56C23.8438 41.3533 24.6371 41.9653 25.5664 42.396C26.4958 42.8267 27.5384 43.042 28.6944 43.042C30.6438 43.042 32.2418 42.4867 33.4884 41.376C34.7578 40.2427 35.5738 38.6447 35.9364 36.582H40.0504C39.8238 38.146 39.3931 39.54 38.7584 40.764C38.1238 41.9653 37.3078 42.9853 36.3104 43.824C35.3358 44.6627 34.2024 45.3087 32.9104 45.762C31.6184 46.2153 30.2018 46.442 28.6604 46.442C26.9151 46.442 25.3284 46.1473 23.9004 45.558C22.4724 44.9687 21.2484 44.13 20.2284 43.042C19.2311 41.954 18.4604 40.6393 17.9164 39.098C17.3724 37.5567 17.1004 35.8113 17.1004 33.862ZM41.9696 33.862C41.9696 31.9353 42.2529 30.19 42.8196 28.626C43.3862 27.062 44.1909 25.736 45.2336 24.648C46.2762 23.56 47.5229 22.7213 48.9736 22.132C50.4469 21.5427 52.0789 21.248 53.8696 21.248C55.6602 21.248 57.2922 21.5427 58.7656 22.132C60.2389 22.7213 61.4969 23.56 62.5396 24.648C63.5822 25.736 64.3869 27.062 64.9536 28.626C65.5202 30.19 65.8036 31.9353 65.8036 33.862C65.8036 35.8113 65.5202 37.568 64.9536 39.132C64.3869 40.6733 63.5822 41.988 62.5396 43.076C61.5196 44.164 60.2616 45.0027 58.7656 45.592C57.2922 46.1587 55.6602 46.442 53.8696 46.442C52.0789 46.442 50.4469 46.1587 48.9736 45.592C47.5002 45.0027 46.2422 44.164 45.1996 43.076C44.1796 41.9653 43.3862 40.6393 42.8196 39.098C42.2529 37.5567 41.9696 35.8113 41.9696 33.862ZM45.9816 33.862C45.9816 35.2673 46.1629 36.548 46.5256 37.704C46.9109 38.8373 47.4436 39.8007 48.1236 40.594C48.8262 41.3873 49.6536 41.9993 50.6056 42.43C51.5802 42.838 52.6682 43.042 53.8696 43.042C55.0709 43.042 56.1589 42.838 57.1336 42.43C58.1082 41.9993 58.9356 41.3873 59.6156 40.594C60.3182 39.8007 60.8509 38.8373 61.2136 37.704C61.5989 36.5707 61.7916 35.29 61.7916 33.862C61.7916 32.4113 61.5989 31.1193 61.2136 29.986C60.8282 28.8527 60.2956 27.8893 59.6156 27.096C58.9356 26.3027 58.1082 25.702 57.1336 25.294C56.1589 24.8633 55.0709 24.648 53.8696 24.648C52.6909 24.648 51.6142 24.8633 50.6396 25.294C49.6649 25.702 48.8376 26.3027 48.1576 27.096C47.4776 27.8893 46.9449 28.8527 46.5596 29.986C46.1742 31.1193 45.9816 32.4113 45.9816 33.862ZM68.2176 37.33V21.69H72.0936V37.194C72.0936 39.0527 72.6149 40.492 73.6576 41.512C74.7229 42.532 76.2189 43.042 78.1456 43.042C80.0722 43.042 81.5569 42.532 82.5996 41.512C83.6422 40.492 84.1636 39.0527 84.1636 37.194V21.69H88.0736V37.33C88.0736 38.7353 87.8356 40.0047 87.3596 41.138C86.8836 42.2487 86.2149 43.2007 85.3536 43.994C84.5149 44.7647 83.4836 45.3653 82.2596 45.796C81.0356 46.2267 79.6642 46.442 78.1456 46.442C76.6042 46.442 75.2216 46.2267 73.9976 45.796C72.7962 45.3653 71.7649 44.7647 70.9036 43.994C70.0422 43.2007 69.3736 42.2487 68.8976 41.138C68.4442 40.0047 68.2176 38.7353 68.2176 37.33ZM91.4266 46V21.69H96.2546L108.155 41.172V21.69H112.031V46H106.999L95.3026 27.028V46H91.4266ZM122.164 46V25.09H114.344V21.69H133.86V25.09H126.04V46H122.164ZM136.15 46V21.69H146.792C149.694 21.69 151.87 22.336 153.32 23.628C154.771 24.8973 155.496 26.6993 155.496 29.034C155.496 31.3687 154.771 33.1707 153.32 34.44C151.87 35.6867 149.694 36.31 146.792 36.31H140.026V46H136.15ZM140.026 32.978H146.554C148.186 32.978 149.41 32.6833 150.226 32.094C151.065 31.482 151.484 30.4733 151.484 29.068C151.484 27.6627 151.065 26.654 150.226 26.042C149.41 25.4073 148.186 25.09 146.554 25.09H140.026V32.978ZM151.688 46L145.908 35.426H150.056L156.21 46H151.688ZM164.304 46V36.786L155.328 21.69H159.782L166.242 33.114L172.702 21.69H177.156L168.18 36.786V46H164.304Z\" fill=\"black\" />\n"});

const PolBtn = createSvgComponent({"meta":{"src":"/_astro/pol.C0YJTUD-.svg","width":281,"height":72,"format":"svg"},"attributes":{"width":"281","height":"72","viewBox":"0 0 281 72","fill":"none"},"children":"\n<path d=\"M16 2H2V57.5L24.5 70H41.5V62L58 70H73V62L86.5 70H104V62L118.5 70H133.5V62L148 70H163.5V62L177.5 70H192V62L206 70H220.5V62L236 70H250V62L265.5 70H279V15L253.5 2H240V10.5L224.5 2H210V10.5L194.5 2H181V10.5L167 2H152.5V10.5L138 2H123V10.5L107.5 2H92V10L74.5 2H61V10L46 2H31.5V10L16 2Z\" fill=\"black\" stroke=\"black\" stroke-width=\"4\" />\n<path d=\"M16 2H2V57.5L24.5 70H41.5V62L58 70H73V62L86.5 70H104V62L118.5 70H133.5V62L148 70H163.5V62L177.5 70H192V62L206 70H220.5V62L236 70H250V62L265.5 70H279V15L253.5 2H240V10.5L224.5 2H210V10.5L194.5 2H181V10.5L167 2H152.5V10.5L138 2H123V10.5L107.5 2H92V10L74.5 2H61V10L46 2H31.5V10L16 2Z\" fill=\"#F6F6F6\" stroke=\"black\" stroke-width=\"4\" />\n<path d=\"M21.1737 35.862C21.1737 33.9353 21.4457 32.2013 21.9897 30.66C22.5337 29.096 23.3043 27.77 24.3017 26.682C25.3217 25.594 26.5457 24.7553 27.9737 24.166C29.4017 23.554 30.9997 23.248 32.7677 23.248C34.2637 23.248 35.635 23.4633 36.8817 23.894C38.151 24.302 39.2617 24.9027 40.2137 25.696C41.1657 26.4893 41.9703 27.464 42.6277 28.62C43.285 29.776 43.7497 31.0907 44.0217 32.564H39.9077C39.477 30.6827 38.6383 29.232 37.3917 28.212C36.145 27.1693 34.581 26.648 32.6997 26.648C31.589 26.648 30.569 26.8633 29.6397 27.294C28.7103 27.7247 27.917 28.3367 27.2597 29.13C26.6023 29.9233 26.0923 30.8867 25.7297 32.02C25.367 33.1307 25.1857 34.4113 25.1857 35.862C25.1857 37.2673 25.367 38.5367 25.7297 39.67C26.0923 40.8033 26.6023 41.7667 27.2597 42.56C27.917 43.3533 28.7103 43.9653 29.6397 44.396C30.569 44.8267 31.6117 45.042 32.7677 45.042C34.717 45.042 36.315 44.4867 37.5617 43.376C38.831 42.2427 39.647 40.6447 40.0097 38.582H44.1237C43.897 40.146 43.4663 41.54 42.8317 42.764C42.197 43.9653 41.381 44.9853 40.3837 45.824C39.409 46.6627 38.2757 47.3087 36.9837 47.762C35.6917 48.2153 34.275 48.442 32.7337 48.442C30.9883 48.442 29.4017 48.1473 27.9737 47.558C26.5457 46.9687 25.3217 46.13 24.3017 45.042C23.3043 43.954 22.5337 42.6393 21.9897 41.098C21.4457 39.5567 21.1737 37.8113 21.1737 35.862ZM46.7568 48V23.69H50.6328V44.6H62.9748V48H46.7568ZM64.1893 39.33V23.69H68.0653V39.194C68.0653 41.0527 68.5866 42.492 69.6293 43.512C70.6946 44.532 72.1906 45.042 74.1173 45.042C76.0439 45.042 77.5286 44.532 78.5713 43.512C79.6139 42.492 80.1353 41.0527 80.1353 39.194V23.69H84.0453V39.33C84.0453 40.7353 83.8073 42.0047 83.3313 43.138C82.8553 44.2487 82.1866 45.2007 81.3253 45.994C80.4866 46.7647 79.4553 47.3653 78.2313 47.796C77.0073 48.2267 75.6359 48.442 74.1173 48.442C72.5759 48.442 71.1933 48.2267 69.9693 47.796C68.7679 47.3653 67.7366 46.7647 66.8753 45.994C66.0139 45.2007 65.3453 44.2487 64.8693 43.138C64.4159 42.0047 64.1893 40.7353 64.1893 39.33ZM87.3642 48V23.69H97.0882C100.171 23.69 102.449 24.2113 103.922 25.254C105.418 26.2967 106.166 27.9627 106.166 30.252C106.166 30.9547 106.053 31.6007 105.826 32.19C105.6 32.7793 105.282 33.3007 104.874 33.754C104.466 34.1847 103.956 34.5473 103.344 34.842C102.732 35.1367 102.041 35.3407 101.27 35.454C102.948 35.6807 104.308 36.2927 105.35 37.29C106.393 38.2647 106.914 39.602 106.914 41.302C106.914 43.546 106.166 45.2233 104.67 46.334C103.197 47.4447 101.021 48 98.1422 48H87.3642ZM91.2402 44.668H97.8362C99.4682 44.668 100.715 44.362 101.576 43.75C102.438 43.1153 102.868 42.186 102.868 40.962C102.868 39.738 102.438 38.7973 101.576 38.14C100.738 37.4827 99.4909 37.154 97.8362 37.154H91.2402V44.668ZM91.2402 34.094H96.7822C98.5049 34.094 99.8196 33.788 100.726 33.176C101.633 32.564 102.086 31.68 102.086 30.524C102.086 29.3453 101.644 28.4727 100.76 27.906C99.8989 27.3167 98.5729 27.022 96.7822 27.022H91.2402V34.094ZM115.819 48V23.69H126.121C129.023 23.69 131.199 24.3473 132.649 25.662C134.1 26.954 134.825 28.8127 134.825 31.238C134.825 33.6407 134.1 35.488 132.649 36.78C131.199 38.072 129.023 38.718 126.121 38.718H119.695V48H115.819ZM119.695 35.318H125.883C127.515 35.318 128.739 35.0007 129.555 34.366C130.394 33.7313 130.813 32.6887 130.813 31.238C130.813 29.7647 130.394 28.7107 129.555 28.076C128.739 27.4187 127.515 27.09 125.883 27.09H119.695V35.318ZM136.621 35.862C136.621 33.9353 136.904 32.19 137.471 30.626C138.038 29.062 138.842 27.736 139.885 26.648C140.928 25.56 142.174 24.7213 143.625 24.132C145.098 23.5427 146.73 23.248 148.521 23.248C150.312 23.248 151.944 23.5427 153.417 24.132C154.89 24.7213 156.148 25.56 157.191 26.648C158.234 27.736 159.038 29.062 159.605 30.626C160.172 32.19 160.455 33.9353 160.455 35.862C160.455 37.8113 160.172 39.568 159.605 41.132C159.038 42.6733 158.234 43.988 157.191 45.076C156.171 46.164 154.913 47.0027 153.417 47.592C151.944 48.1587 150.312 48.442 148.521 48.442C146.73 48.442 145.098 48.1587 143.625 47.592C142.152 47.0027 140.894 46.164 139.851 45.076C138.831 43.9653 138.038 42.6393 137.471 41.098C136.904 39.5567 136.621 37.8113 136.621 35.862ZM140.633 35.862C140.633 37.2673 140.814 38.548 141.177 39.704C141.562 40.8373 142.095 41.8007 142.775 42.594C143.478 43.3873 144.305 43.9993 145.257 44.43C146.232 44.838 147.32 45.042 148.521 45.042C149.722 45.042 150.81 44.838 151.785 44.43C152.76 43.9993 153.587 43.3873 154.267 42.594C154.97 41.8007 155.502 40.8373 155.865 39.704C156.25 38.5707 156.443 37.29 156.443 35.862C156.443 34.4113 156.25 33.1193 155.865 31.986C155.48 30.8527 154.947 29.8893 154.267 29.096C153.587 28.3027 152.76 27.702 151.785 27.294C150.81 26.8633 149.722 26.648 148.521 26.648C147.342 26.648 146.266 26.8633 145.291 27.294C144.316 27.702 143.489 28.3027 142.809 29.096C142.129 29.8893 141.596 30.8527 141.211 31.986C140.826 33.1193 140.633 34.4113 140.633 35.862ZM163.067 48V23.69H166.943V44.6H179.285V48H163.067ZM181.861 48V23.69H185.737V48H181.861ZM195.831 48V27.09H188.011V23.69H207.527V27.09H199.707V48H195.831ZM209.851 48V23.69H213.727V48H209.851ZM216.342 35.862C216.342 33.9353 216.614 32.2013 217.158 30.66C217.702 29.096 218.472 27.77 219.47 26.682C220.49 25.594 221.714 24.7553 223.142 24.166C224.57 23.554 226.168 23.248 227.936 23.248C229.432 23.248 230.803 23.4633 232.05 23.894C233.319 24.302 234.43 24.9027 235.382 25.696C236.334 26.4893 237.138 27.464 237.796 28.62C238.453 29.776 238.918 31.0907 239.19 32.564H235.076C234.645 30.6827 233.806 29.232 232.56 28.212C231.313 27.1693 229.749 26.648 227.868 26.648C226.757 26.648 225.737 26.8633 224.808 27.294C223.878 27.7247 223.085 28.3367 222.428 29.13C221.77 29.9233 221.26 30.8867 220.898 32.02C220.535 33.1307 220.354 34.4113 220.354 35.862C220.354 37.2673 220.535 38.5367 220.898 39.67C221.26 40.8033 221.77 41.7667 222.428 42.56C223.085 43.3533 223.878 43.9653 224.808 44.396C225.737 44.8267 226.78 45.042 227.936 45.042C229.885 45.042 231.483 44.4867 232.73 43.376C233.999 42.2427 234.815 40.6447 235.178 38.582H239.292C239.065 40.146 238.634 41.54 238 42.764C237.365 43.9653 236.549 44.9853 235.552 45.824C234.577 46.6627 233.444 47.3087 232.152 47.762C230.86 48.2153 229.443 48.442 227.902 48.442C226.156 48.442 224.57 48.1473 223.142 47.558C221.714 46.9687 220.49 46.13 219.47 45.042C218.472 43.954 217.702 42.6393 217.158 41.098C216.614 39.5567 216.342 37.8113 216.342 35.862ZM240.47 39.534H244.482C244.573 40.3953 244.777 41.1773 245.094 41.88C245.434 42.56 245.876 43.138 246.42 43.614C246.964 44.09 247.61 44.4527 248.358 44.702C249.106 44.9287 249.956 45.042 250.908 45.042C251.701 45.042 252.415 44.9627 253.05 44.804C253.707 44.6453 254.251 44.4073 254.682 44.09C255.135 43.75 255.475 43.3533 255.702 42.9C255.951 42.424 256.076 41.9027 256.076 41.336C256.076 40.656 255.929 40.1007 255.634 39.67C255.339 39.2167 254.909 38.8427 254.342 38.548C253.798 38.2533 253.129 38.0153 252.336 37.834C251.543 37.63 250.659 37.426 249.684 37.222C248.528 36.9953 247.429 36.7347 246.386 36.44C245.343 36.1453 244.425 35.7487 243.632 35.25C242.839 34.7513 242.204 34.1167 241.728 33.346C241.252 32.5527 241.014 31.5553 241.014 30.354C241.014 29.2887 241.218 28.3253 241.626 27.464C242.034 26.58 242.612 25.832 243.36 25.22C244.131 24.5853 245.06 24.098 246.148 23.758C247.259 23.418 248.494 23.248 249.854 23.248C251.373 23.248 252.721 23.4633 253.9 23.894C255.079 24.3247 256.076 24.914 256.892 25.662C257.731 26.41 258.388 27.3053 258.864 28.348C259.34 29.368 259.612 30.4787 259.68 31.68H255.668C255.577 30.9547 255.385 30.286 255.09 29.674C254.818 29.062 254.433 28.5293 253.934 28.076C253.435 27.6227 252.835 27.2713 252.132 27.022C251.452 26.7727 250.681 26.648 249.82 26.648C249.117 26.648 248.471 26.7387 247.882 26.92C247.293 27.0787 246.783 27.328 246.352 27.668C245.944 27.9853 245.627 28.3593 245.4 28.79C245.173 29.2207 245.06 29.708 245.06 30.252C245.06 30.8867 245.219 31.4193 245.536 31.85C245.876 32.258 246.318 32.598 246.862 32.87C247.429 33.142 248.086 33.3687 248.834 33.55C249.582 33.7313 250.387 33.9127 251.248 34.094C252.495 34.3433 253.651 34.6267 254.716 34.944C255.804 35.2387 256.745 35.6467 257.538 36.168C258.354 36.6893 258.977 37.3467 259.408 38.14C259.861 38.9333 260.088 39.9307 260.088 41.132C260.088 42.2653 259.861 43.2853 259.408 44.192C258.977 45.0987 258.354 45.8693 257.538 46.504C256.722 47.116 255.747 47.592 254.614 47.932C253.481 48.272 252.234 48.442 250.874 48.442C249.265 48.442 247.825 48.2267 246.556 47.796C245.309 47.3653 244.244 46.7533 243.36 45.96C242.476 45.1667 241.785 44.226 241.286 43.138C240.787 42.05 240.515 40.8487 240.47 39.534Z\" fill=\"black\" />\n"});

const RoleBtn = createSvgComponent({"meta":{"src":"/_astro/role.BegA5RHh.svg","width":130,"height":68,"format":"svg"},"attributes":{"width":"130","height":"68","viewBox":"0 0 130 68","fill":"none"},"children":"\n<path d=\"M13.1793 2H2V52.9673L25.0573 66H36.9353V54.5964L54.8688 66H66.7468V54.5964L84.2144 66H96.3253V54.5964L116.821 66H128V14.3345L103.079 2H91.9002V11.0764L72.3364 2H60.9242V11.0764L42.9908 2H31.3457V11.0764L13.1793 2Z\" fill=\"black\" stroke=\"black\" stroke-width=\"4\" />\n<path d=\"M13.1793 2H2V52.9673L25.0573 66H36.9353V54.5964L54.8688 66H66.7468V54.5964L84.2144 66H96.3253V54.5964L116.821 66H128V14.3345L103.079 2H91.9002V11.0764L72.3364 2H60.9242V11.0764L42.9908 2H31.3457V11.0764L13.1793 2Z\" fill=\"#F6F6F6\" stroke=\"black\" stroke-width=\"4\" />\n<path d=\"M23.668 46V21.69H34.31C37.2113 21.69 39.3873 22.336 40.838 23.628C42.2886 24.8973 43.014 26.6993 43.014 29.034C43.014 31.3687 42.2886 33.1707 40.838 34.44C39.3873 35.6867 37.2113 36.31 34.31 36.31H27.544V46H23.668ZM27.544 32.978H34.072C35.704 32.978 36.928 32.6833 37.744 32.094C38.5826 31.482 39.002 30.4733 39.002 29.068C39.002 27.6627 38.5826 26.654 37.744 26.042C36.928 25.4073 35.704 25.09 34.072 25.09H27.544V32.978ZM39.206 46L33.426 35.426H37.574L43.728 46H39.206ZM44.7352 33.862C44.7352 31.9353 45.0185 30.19 45.5852 28.626C46.1519 27.062 46.9565 25.736 47.9992 24.648C49.0419 23.56 50.2885 22.7213 51.7392 22.132C53.2125 21.5427 54.8445 21.248 56.6352 21.248C58.4259 21.248 60.0579 21.5427 61.5312 22.132C63.0045 22.7213 64.2625 23.56 65.3052 24.648C66.3479 25.736 67.1525 27.062 67.7192 28.626C68.2859 30.19 68.5692 31.9353 68.5692 33.862C68.5692 35.8113 68.2859 37.568 67.7192 39.132C67.1525 40.6733 66.3479 41.988 65.3052 43.076C64.2852 44.164 63.0272 45.0027 61.5312 45.592C60.0579 46.1587 58.4259 46.442 56.6352 46.442C54.8445 46.442 53.2125 46.1587 51.7392 45.592C50.2659 45.0027 49.0079 44.164 47.9652 43.076C46.9452 41.9653 46.1519 40.6393 45.5852 39.098C45.0185 37.5567 44.7352 35.8113 44.7352 33.862ZM48.7472 33.862C48.7472 35.2673 48.9285 36.548 49.2912 37.704C49.6765 38.8373 50.2092 39.8007 50.8892 40.594C51.5919 41.3873 52.4192 41.9993 53.3712 42.43C54.3459 42.838 55.4339 43.042 56.6352 43.042C57.8365 43.042 58.9245 42.838 59.8992 42.43C60.8739 41.9993 61.7012 41.3873 62.3812 40.594C63.0839 39.8007 63.6165 38.8373 63.9792 37.704C64.3645 36.5707 64.5572 35.29 64.5572 33.862C64.5572 32.4113 64.3645 31.1193 63.9792 29.986C63.5939 28.8527 63.0612 27.8893 62.3812 27.096C61.7012 26.3027 60.8739 25.702 59.8992 25.294C58.9245 24.8633 57.8365 24.648 56.6352 24.648C55.4565 24.648 54.3799 24.8633 53.4052 25.294C52.4305 25.702 51.6032 26.3027 50.9232 27.096C50.2432 27.8893 49.7105 28.8527 49.3252 29.986C48.9399 31.1193 48.7472 32.4113 48.7472 33.862ZM71.1816 46V21.69H75.0576V42.6H87.3996V46H71.1816ZM89.9414 46V21.69H106.669V25.09H93.8174V32.128H106.091V35.46H93.8174V42.6H106.839V46H89.9414Z\" fill=\"black\" />\n"});

const StyleBtn = createSvgComponent({"meta":{"src":"/_astro/style.BKYFJ-Rc.svg","width":130,"height":68,"format":"svg"},"attributes":{"width":"130","height":"68","viewBox":"0 0 130 68","fill":"none"},"children":"\n<path d=\"M13.1793 2H2V52.9673L25.0573 66H36.9353V54.5964L54.8688 66H66.7468V54.5964L84.2144 66H96.3253V54.5964L116.821 66H128V14.3345L103.079 2H91.9002V11.0764L72.3364 2H60.9242V11.0764L42.9908 2H31.3457V11.0764L13.1793 2Z\" fill=\"black\" stroke=\"black\" stroke-width=\"4\" />\n<path d=\"M13.1793 2H2V52.9673L25.0573 66H36.9353V54.5964L54.8688 66H66.7468V54.5964L84.2144 66H96.3253V54.5964L116.821 66H128V14.3345L103.079 2H91.9002V11.0764L72.3364 2H60.9242V11.0764L42.9908 2H31.3457V11.0764L13.1793 2Z\" fill=\"#F6F6F6\" stroke=\"black\" stroke-width=\"4\" />\n<path d=\"M15.2737 37.534H19.2857C19.3763 38.3953 19.5803 39.1773 19.8977 39.88C20.2377 40.56 20.6797 41.138 21.2237 41.614C21.7677 42.09 22.4137 42.4527 23.1617 42.702C23.9097 42.9287 24.7597 43.042 25.7117 43.042C26.505 43.042 27.219 42.9627 27.8537 42.804C28.511 42.6453 29.055 42.4073 29.4857 42.09C29.939 41.75 30.279 41.3533 30.5057 40.9C30.755 40.424 30.8797 39.9027 30.8797 39.336C30.8797 38.656 30.7323 38.1007 30.4377 37.67C30.143 37.2167 29.7123 36.8427 29.1457 36.548C28.6017 36.2533 27.933 36.0153 27.1397 35.834C26.3463 35.63 25.4623 35.426 24.4877 35.222C23.3317 34.9953 22.2323 34.7347 21.1897 34.44C20.147 34.1453 19.229 33.7487 18.4357 33.25C17.6423 32.7513 17.0077 32.1167 16.5317 31.346C16.0557 30.5527 15.8177 29.5553 15.8177 28.354C15.8177 27.2887 16.0217 26.3253 16.4297 25.464C16.8377 24.58 17.4157 23.832 18.1637 23.22C18.9343 22.5853 19.8637 22.098 20.9517 21.758C22.0623 21.418 23.2977 21.248 24.6577 21.248C26.1763 21.248 27.525 21.4633 28.7037 21.894C29.8823 22.3247 30.8797 22.914 31.6957 23.662C32.5343 24.41 33.1917 25.3053 33.6677 26.348C34.1437 27.368 34.4157 28.4787 34.4837 29.68H30.4717C30.381 28.9547 30.1883 28.286 29.8937 27.674C29.6217 27.062 29.2363 26.5293 28.7377 26.076C28.239 25.6227 27.6383 25.2713 26.9357 25.022C26.2557 24.7727 25.485 24.648 24.6237 24.648C23.921 24.648 23.275 24.7387 22.6857 24.92C22.0963 25.0787 21.5863 25.328 21.1557 25.668C20.7477 25.9853 20.4303 26.3593 20.2037 26.79C19.977 27.2207 19.8637 27.708 19.8637 28.252C19.8637 28.8867 20.0223 29.4193 20.3397 29.85C20.6797 30.258 21.1217 30.598 21.6657 30.87C22.2323 31.142 22.8897 31.3687 23.6377 31.55C24.3857 31.7313 25.1903 31.9127 26.0517 32.094C27.2983 32.3433 28.4543 32.6267 29.5197 32.944C30.6077 33.2387 31.5483 33.6467 32.3417 34.168C33.1577 34.6893 33.781 35.3467 34.2117 36.14C34.665 36.9333 34.8917 37.9307 34.8917 39.132C34.8917 40.2653 34.665 41.2853 34.2117 42.192C33.781 43.0987 33.1577 43.8693 32.3417 44.504C31.5257 45.116 30.551 45.592 29.4177 45.932C28.2843 46.272 27.0377 46.442 25.6777 46.442C24.0683 46.442 22.629 46.2267 21.3597 45.796C20.113 45.3653 19.0477 44.7533 18.1637 43.96C17.2797 43.1667 16.5883 42.226 16.0897 41.138C15.591 40.05 15.319 38.8487 15.2737 37.534ZM42.7191 46V25.09H34.8991V21.69H54.4151V25.09H46.5951V46H42.7191ZM64.2063 46V36.786L55.2303 21.69H59.6843L66.1443 33.114L72.6043 21.69H77.0583L68.0823 36.786V46H64.2063ZM78.4199 46V21.69H82.2959V42.6H94.6379V46H78.4199ZM97.1797 46V21.69H113.908V25.09H101.056V32.128H113.33V35.46H101.056V42.6H114.078V46H97.1797Z\" fill=\"black\" />\n"});

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$ArtistMap = createComponent(async ($$result, $$props, $$slots) => {
  const mapboxToken = MAPBOX_ACCESS_TOKEN;
  const filters = [
    { id: "country", label: "Country", icon: CountryBtn, options: ["France", "USA", "Germany", "Japan"] },
    { id: "city", label: "City", icon: CityBtn, options: ["Paris", "Berlin", "Tokyo", "NYC"] },
    { id: "style", label: "Style", icon: StyleBtn, options: ["Jazz", "HipHop", "Techno"] },
    { id: "role", label: "Role", icon: RoleBtn, options: ["DJ", "Producer", "Singer"] },
    { id: "pol", label: "Pol", icon: PolBtn, options: ["Option A", "Option B", "Option C"] }
  ];
  return renderTemplate(_a || (_a = __template(["", '<div class="map-container" data-astro-cid-4qmttrul> <div class="map-wrapper" data-astro-cid-4qmttrul> <div id="wavmap" class="map" data-astro-cid-4qmttrul></div> <button class="shuffle" data-astro-cid-4qmttrul> <img', ' alt="shuffle" data-astro-cid-4qmttrul> </button> </div> <div class="filters-container" data-astro-cid-4qmttrul> <h2 data-astro-cid-4qmttrul>', "</h2> ", " </div> </div> <script>(function(){", "\n  // Fetch real artist data from Directus API\n  async function loadApprovedArtists() {\n    try {\n      console.log('\u{1F50D} Fetching artists from API...');\n      console.log('\u{1F50D} Current timestamp:', new Date().toISOString());\n      const response = await fetch('/api/artists/approved?_t=' + Date.now());\n      const data = await response.json();\n\n      console.log('\u{1F50D} API Response:', data);\n      console.log('\u{1F50D} API Response details:');\n      console.log('  - Success:', data.success);\n      console.log('  - Count:', data.count);\n      console.log('  - Artists array:', data.artists);\n\n      if (data.artists && data.artists.length > 0) {\n        data.artists.forEach((artist, index) => {\n          console.log(`\u{1F3B5} Artist ${index + 1}:`, {\n            id: artist.id,\n            name: artist.artistName,\n            city: artist.city,\n            country: artist.country,\n            lat: artist.latitude,\n            lng: artist.longitude,\n            activities: artist.activities,\n            genres: artist.genres?.slice(0, 3)\n          });\n        });\n      }\n\n      if (data.success && data.artists && data.artists.length > 0) {\n        console.log('\u2705 Using real artist data:', data.artists.length, 'artists');\n        console.log('\u{1F6A8} DATA SOURCE: REAL API DATA');\n        return data.artists;\n      } else {\n        console.log('\u26A0\uFE0F No artists found in database');\n        return [];\n      }\n    } catch (error) {\n      console.error('\u{1F5FA}\uFE0F Error loading artists:', error);\n      return [];\n    }\n  }\n\n  // Simple filter toggle functionality\n  document.querySelectorAll('.filter').forEach(btn => {\n    btn.addEventListener('click', () => {\n      const targetId = btn.dataset.target;\n      const el = document.getElementById(targetId);\n      if (el) {\n        el.classList.toggle('hidden');\n      }\n    });\n  });\n\n  \n  // Cleanup function to properly remove existing map\n  function cleanupMap() {\n    if (window.wavmapInstance) {\n      try {\n        window.wavmapInstance.remove();\n      } catch (e) {\n      }\n      window.wavmapInstance = null;\n    }\n  }\n  \n  async function initializeMap() {\n    const mapContainer = document.getElementById('wavmap');\n    \n    if (!mapContainer) {\n      return;\n    }\n    \n    // Always cleanup existing map first\n    cleanupMap();\n    \n    // Wait for Mapbox GL to load with retry mechanism\n    let attempts = 0;\n    const maxAttempts = 10;\n    \n    while (typeof mapboxgl === 'undefined' && attempts < maxAttempts) {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      attempts++;\n    }\n    \n    // Check if Mapbox GL is available\n    if (typeof mapboxgl === 'undefined') {\n      console.error('\u{1F5FA}\uFE0F Mapbox GL JS not loaded after', maxAttempts, 'attempts');\n      return;\n    }\n    \n    // Use token from environment variables\n    mapboxgl.accessToken = mapboxToken;\n    \n    try {\n\n      const europeBounds = [\n          [ -30, 15 ], // Coin sud-ouest (plus vers Atlantique/Afrique)\n          [ 60, 80 ]   // Coin nord-est (plus vers Sib\xE9rie/Arctique)\n      ];\n      \n      const map = new mapboxgl.Map({\n        container: 'wavmap',\n        style: 'mapbox://styles/mapbox/satellite-v9',\n        center: [17.4306, 50.1681], // Centered on Europe (user selected)\n        zoom: 2, // Show extended Europe level view\n        maxBounds: europeBounds, // Removed for unlimited zoom/pan\n        minZoom: 0,\n        maxZoom: 18\n      });\n      \n      // Store global instance\n      window.wavmapInstance = map;\n      \n      // Add navigation controls\n      map.addControl(new mapboxgl.NavigationControl());\n      \n      // Add fullscreen control  \n      map.addControl(new mapboxgl.FullscreenControl());\n      \n      // Load and add real artist data when map is ready\n      map.on('load', async function() {\n        // Log current map state\n        console.log('\u{1F5FA}\uFE0F Map loaded!');\n        console.log('\u{1F4CD} Initial center:', map.getCenter());\n        console.log('\u{1F50D} Initial zoom:', map.getZoom());\n\n        // Force center on Europe (user selected position)\n        map.setCenter([17.4306, 50.1681]);\n        map.setZoom(2);\n\n        console.log('\u{1F4CD} After setCenter - Center:', map.getCenter());\n        console.log('\u{1F50D} After setZoom - Zoom:', map.getZoom());\n\n        // Fetch approved artists from API\n        const artists = await loadApprovedArtists();\n\n        if (artists.length === 0) {\n          console.log('\u2139\uFE0F No artists to display on map');\n          return;\n        }\n\n        console.log(`\u{1F3B5} Loaded ${artists.length} artists for clustering`);\n        artists.forEach((artist, i) => {\n          if (i < 3) { // Log first 3 for debugging\n            console.log(`Artist ${i + 1}:`, {\n              name: artist.artistName,\n              coords: [artist.longitude, artist.latitude],\n              city: artist.city\n            });\n          }\n        });\n\n        // Store artists globally\n        allArtists = artists;\n\n        // Convert artist data to GeoJSON format with null checks\n        const geojsonData = {\n          type: 'FeatureCollection',\n          features: artists\n            .filter(artist => artist.longitude != null && artist.latitude != null)\n            .map(artist => ({\n              type: 'Feature',\n              geometry: {\n                type: 'Point',\n                coordinates: [\n                  parseFloat(artist.longitude) || 0,\n                  parseFloat(artist.latitude) || 0\n                ]\n              },\n              properties: {\n                id: artist.id || '',\n                artistName: artist.artistName || 'Unknown Artist',\n                city: artist.city || 'Unknown City',\n                country: artist.country || 'Unknown Country',\n                activities: Array.isArray(artist.activities) ? artist.activities.join(', ') : '',\n                genres: Array.isArray(artist.genres) ? artist.genres.join(', ') : ''\n              }\n            }))\n        };\n\n        // Add cluster source\n        console.log('\u{1F5FA}\uFE0F Adding points source with', geojsonData.features.length, 'features');\n        map.addSource('points', {\n          type: 'geojson',\n          data: geojsonData,\n          cluster: true,\n          clusterMaxZoom: 14,\n          clusterRadius: 50\n        });\n\n        // Impl\xE9mentation du clustering selon le tutoriel officiel Mapbox\n        console.log('\u2705 Points source added, adding cluster layers');\n\n        // Layer 1: Clusters circles\n        map.addLayer({\n          id: 'clusters',\n          type: 'circle',\n          source: 'points',\n          filter: ['has', 'point_count'],\n          paint: {\n            'circle-color': [\n              'step',\n              ['get', 'point_count'],\n              '#51bbd6', // Couleur de base\n              10,\n              '#f1f075', // 10-99 points\n              100,\n              '#f28cb1'  // 100+ points\n            ],\n            'circle-radius': [\n              'step',\n              ['get', 'point_count'],\n              20,  // Rayon de base\n              10,\n              30,  // 10-99 points\n              100,\n              40   // 100+ points\n            ]\n          }\n        });\n\n        // Layer 2: Cluster count labels\n        map.addLayer({\n          id: 'cluster-count',\n          type: 'symbol',\n          source: 'points',\n          filter: ['has', 'point_count'],\n          layout: {\n            'text-field': ['get', 'point_count_abbreviated'],\n            'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n            'text-size': 12\n          }\n        });\n\n        // Layer 3: Unclustered points\n        map.addLayer({\n          id: 'unclustered-point',\n          type: 'circle',\n          source: 'points',\n          filter: ['!', ['has', 'point_count']],\n          paint: {\n            'circle-color': '#11b4da',\n            'circle-radius': 6,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#fff'\n          }\n        });\n\n        // Inspect a cluster on click\n        map.on('click', 'clusters', (e) => {\n          const features = map.queryRenderedFeatures(e.point, {\n            layers: ['clusters']\n          });\n          const clusterId = features[0].properties.cluster_id;\n          map.getSource('points').getClusterExpansionZoom(clusterId, (err, zoom) => {\n            if (err) return;\n\n            map.easeTo({\n              center: features[0].geometry.coordinates,\n              zoom: zoom\n            });\n          });\n        });\n\n        // When a click event occurs on a feature in the unclustered-point layer, open a popup\n        map.on('click', 'unclustered-point', (e) => {\n          const coordinates = e.features[0].geometry.coordinates.slice();\n          const properties = e.features[0].properties;\n\n          // Ensure that if the map is zoomed out such that multiple\n          // copies of the feature are visible, the popup appears\n          // over the copy being pointed to.\n          while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n          }\n\n          new mapboxgl.Popup()\n            .setLngLat(coordinates)\n            .setHTML(`\n              <div class=\"artist-popup\">\n                <h3>${properties.artistName}</h3>\n                <p><strong>${properties.city}, ${properties.country}</strong></p>\n                <p><strong>Activities:</strong> ${properties.activities}</p>\n                <p><strong>Genres:</strong> ${properties.genres}</p>\n                <div class=\"popup-actions\">\n                  <a href=\"/artist/${properties.id}\" class=\"view-profile-btn\">\u{1F464} Voir le profil</a>\n                </div>\n              </div>\n            `)\n            .addTo(map);\n        });\n\n        // Change the cursor to a pointer when the mouse is over the layers\n        map.on('mouseenter', 'clusters', () => {\n          map.getCanvas().style.cursor = 'pointer';\n        });\n        map.on('mouseleave', 'clusters', () => {\n          map.getCanvas().style.cursor = '';\n        });\n\n        map.on('mouseenter', 'unclustered-point', () => {\n          map.getCanvas().style.cursor = 'pointer';\n        });\n        map.on('mouseleave', 'unclustered-point', () => {\n          map.getCanvas().style.cursor = '';\n        });\n\n        // Add click handler to get coordinates easily\n        map.on('click', function(e) {\n          const coords = e.lngLat;\n          console.log('\u{1F3AF} Clicked coordinates:');\n          console.log(`   Longitude: ${coords.lng.toFixed(4)}`);\n          console.log(`   Latitude: ${coords.lat.toFixed(4)}`);\n          console.log(`   Array format: [${coords.lng.toFixed(4)}, ${coords.lat.toFixed(4)}]`);\n        });\n      });\n\n      map.on('error', function(e) {\n        console.error('\u{1F5FA}\uFE0F Mapbox error:', e);\n      });\n      \n    } catch (error) {\n      console.error('\u{1F5FA}\uFE0F Error initializing Mapbox:', error);\n    }\n  }\n  \n  // Cleanup before page swap (View Transitions)\n  document.addEventListener('astro:before-swap', () => {\n    cleanupMap();\n  });\n  \n  // Reinitialize after page swap (View Transitions)  \n  document.addEventListener('astro:after-swap', () => {\n    // Small delay to ensure DOM is ready\n    setTimeout(initializeMap, 50);\n  });\n  \n  // Initialize map on page load (View Transitions)\n  document.addEventListener('astro:page-load', () => {\n    setTimeout(initializeMap, 50);\n  });\n  \n  // Initialize on DOM content loaded (first load)\n  document.addEventListener('DOMContentLoaded', () => {\n    initializeMap();\n  });\n  \n  // Fallback for immediate execution\n  if (document.readyState !== 'loading') {\n    initializeMap();\n  }\n  \n})();<\/script>  <!-- Import Mapbox CSS and JS --> <link href=\"https://api.mapbox.com/mapbox-gl-js/v3.0.1/mapbox-gl.css\" rel=\"stylesheet\"> ", ""], ["", '<div class="map-container" data-astro-cid-4qmttrul> <div class="map-wrapper" data-astro-cid-4qmttrul> <div id="wavmap" class="map" data-astro-cid-4qmttrul></div> <button class="shuffle" data-astro-cid-4qmttrul> <img', ' alt="shuffle" data-astro-cid-4qmttrul> </button> </div> <div class="filters-container" data-astro-cid-4qmttrul> <h2 data-astro-cid-4qmttrul>', "</h2> ", " </div> </div> <script>(function(){", "\n  // Fetch real artist data from Directus API\n  async function loadApprovedArtists() {\n    try {\n      console.log('\u{1F50D} Fetching artists from API...');\n      console.log('\u{1F50D} Current timestamp:', new Date().toISOString());\n      const response = await fetch('/api/artists/approved?_t=' + Date.now());\n      const data = await response.json();\n\n      console.log('\u{1F50D} API Response:', data);\n      console.log('\u{1F50D} API Response details:');\n      console.log('  - Success:', data.success);\n      console.log('  - Count:', data.count);\n      console.log('  - Artists array:', data.artists);\n\n      if (data.artists && data.artists.length > 0) {\n        data.artists.forEach((artist, index) => {\n          console.log(\\`\u{1F3B5} Artist \\${index + 1}:\\`, {\n            id: artist.id,\n            name: artist.artistName,\n            city: artist.city,\n            country: artist.country,\n            lat: artist.latitude,\n            lng: artist.longitude,\n            activities: artist.activities,\n            genres: artist.genres?.slice(0, 3)\n          });\n        });\n      }\n\n      if (data.success && data.artists && data.artists.length > 0) {\n        console.log('\u2705 Using real artist data:', data.artists.length, 'artists');\n        console.log('\u{1F6A8} DATA SOURCE: REAL API DATA');\n        return data.artists;\n      } else {\n        console.log('\u26A0\uFE0F No artists found in database');\n        return [];\n      }\n    } catch (error) {\n      console.error('\u{1F5FA}\uFE0F Error loading artists:', error);\n      return [];\n    }\n  }\n\n  // Simple filter toggle functionality\n  document.querySelectorAll('.filter').forEach(btn => {\n    btn.addEventListener('click', () => {\n      const targetId = btn.dataset.target;\n      const el = document.getElementById(targetId);\n      if (el) {\n        el.classList.toggle('hidden');\n      }\n    });\n  });\n\n  \n  // Cleanup function to properly remove existing map\n  function cleanupMap() {\n    if (window.wavmapInstance) {\n      try {\n        window.wavmapInstance.remove();\n      } catch (e) {\n      }\n      window.wavmapInstance = null;\n    }\n  }\n  \n  async function initializeMap() {\n    const mapContainer = document.getElementById('wavmap');\n    \n    if (!mapContainer) {\n      return;\n    }\n    \n    // Always cleanup existing map first\n    cleanupMap();\n    \n    // Wait for Mapbox GL to load with retry mechanism\n    let attempts = 0;\n    const maxAttempts = 10;\n    \n    while (typeof mapboxgl === 'undefined' && attempts < maxAttempts) {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      attempts++;\n    }\n    \n    // Check if Mapbox GL is available\n    if (typeof mapboxgl === 'undefined') {\n      console.error('\u{1F5FA}\uFE0F Mapbox GL JS not loaded after', maxAttempts, 'attempts');\n      return;\n    }\n    \n    // Use token from environment variables\n    mapboxgl.accessToken = mapboxToken;\n    \n    try {\n\n      const europeBounds = [\n          [ -30, 15 ], // Coin sud-ouest (plus vers Atlantique/Afrique)\n          [ 60, 80 ]   // Coin nord-est (plus vers Sib\xE9rie/Arctique)\n      ];\n      \n      const map = new mapboxgl.Map({\n        container: 'wavmap',\n        style: 'mapbox://styles/mapbox/satellite-v9',\n        center: [17.4306, 50.1681], // Centered on Europe (user selected)\n        zoom: 2, // Show extended Europe level view\n        maxBounds: europeBounds, // Removed for unlimited zoom/pan\n        minZoom: 0,\n        maxZoom: 18\n      });\n      \n      // Store global instance\n      window.wavmapInstance = map;\n      \n      // Add navigation controls\n      map.addControl(new mapboxgl.NavigationControl());\n      \n      // Add fullscreen control  \n      map.addControl(new mapboxgl.FullscreenControl());\n      \n      // Load and add real artist data when map is ready\n      map.on('load', async function() {\n        // Log current map state\n        console.log('\u{1F5FA}\uFE0F Map loaded!');\n        console.log('\u{1F4CD} Initial center:', map.getCenter());\n        console.log('\u{1F50D} Initial zoom:', map.getZoom());\n\n        // Force center on Europe (user selected position)\n        map.setCenter([17.4306, 50.1681]);\n        map.setZoom(2);\n\n        console.log('\u{1F4CD} After setCenter - Center:', map.getCenter());\n        console.log('\u{1F50D} After setZoom - Zoom:', map.getZoom());\n\n        // Fetch approved artists from API\n        const artists = await loadApprovedArtists();\n\n        if (artists.length === 0) {\n          console.log('\u2139\uFE0F No artists to display on map');\n          return;\n        }\n\n        console.log(\\`\u{1F3B5} Loaded \\${artists.length} artists for clustering\\`);\n        artists.forEach((artist, i) => {\n          if (i < 3) { // Log first 3 for debugging\n            console.log(\\`Artist \\${i + 1}:\\`, {\n              name: artist.artistName,\n              coords: [artist.longitude, artist.latitude],\n              city: artist.city\n            });\n          }\n        });\n\n        // Store artists globally\n        allArtists = artists;\n\n        // Convert artist data to GeoJSON format with null checks\n        const geojsonData = {\n          type: 'FeatureCollection',\n          features: artists\n            .filter(artist => artist.longitude != null && artist.latitude != null)\n            .map(artist => ({\n              type: 'Feature',\n              geometry: {\n                type: 'Point',\n                coordinates: [\n                  parseFloat(artist.longitude) || 0,\n                  parseFloat(artist.latitude) || 0\n                ]\n              },\n              properties: {\n                id: artist.id || '',\n                artistName: artist.artistName || 'Unknown Artist',\n                city: artist.city || 'Unknown City',\n                country: artist.country || 'Unknown Country',\n                activities: Array.isArray(artist.activities) ? artist.activities.join(', ') : '',\n                genres: Array.isArray(artist.genres) ? artist.genres.join(', ') : ''\n              }\n            }))\n        };\n\n        // Add cluster source\n        console.log('\u{1F5FA}\uFE0F Adding points source with', geojsonData.features.length, 'features');\n        map.addSource('points', {\n          type: 'geojson',\n          data: geojsonData,\n          cluster: true,\n          clusterMaxZoom: 14,\n          clusterRadius: 50\n        });\n\n        // Impl\xE9mentation du clustering selon le tutoriel officiel Mapbox\n        console.log('\u2705 Points source added, adding cluster layers');\n\n        // Layer 1: Clusters circles\n        map.addLayer({\n          id: 'clusters',\n          type: 'circle',\n          source: 'points',\n          filter: ['has', 'point_count'],\n          paint: {\n            'circle-color': [\n              'step',\n              ['get', 'point_count'],\n              '#51bbd6', // Couleur de base\n              10,\n              '#f1f075', // 10-99 points\n              100,\n              '#f28cb1'  // 100+ points\n            ],\n            'circle-radius': [\n              'step',\n              ['get', 'point_count'],\n              20,  // Rayon de base\n              10,\n              30,  // 10-99 points\n              100,\n              40   // 100+ points\n            ]\n          }\n        });\n\n        // Layer 2: Cluster count labels\n        map.addLayer({\n          id: 'cluster-count',\n          type: 'symbol',\n          source: 'points',\n          filter: ['has', 'point_count'],\n          layout: {\n            'text-field': ['get', 'point_count_abbreviated'],\n            'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n            'text-size': 12\n          }\n        });\n\n        // Layer 3: Unclustered points\n        map.addLayer({\n          id: 'unclustered-point',\n          type: 'circle',\n          source: 'points',\n          filter: ['!', ['has', 'point_count']],\n          paint: {\n            'circle-color': '#11b4da',\n            'circle-radius': 6,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#fff'\n          }\n        });\n\n        // Inspect a cluster on click\n        map.on('click', 'clusters', (e) => {\n          const features = map.queryRenderedFeatures(e.point, {\n            layers: ['clusters']\n          });\n          const clusterId = features[0].properties.cluster_id;\n          map.getSource('points').getClusterExpansionZoom(clusterId, (err, zoom) => {\n            if (err) return;\n\n            map.easeTo({\n              center: features[0].geometry.coordinates,\n              zoom: zoom\n            });\n          });\n        });\n\n        // When a click event occurs on a feature in the unclustered-point layer, open a popup\n        map.on('click', 'unclustered-point', (e) => {\n          const coordinates = e.features[0].geometry.coordinates.slice();\n          const properties = e.features[0].properties;\n\n          // Ensure that if the map is zoomed out such that multiple\n          // copies of the feature are visible, the popup appears\n          // over the copy being pointed to.\n          while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n          }\n\n          new mapboxgl.Popup()\n            .setLngLat(coordinates)\n            .setHTML(\\`\n              <div class=\"artist-popup\">\n                <h3>\\${properties.artistName}</h3>\n                <p><strong>\\${properties.city}, \\${properties.country}</strong></p>\n                <p><strong>Activities:</strong> \\${properties.activities}</p>\n                <p><strong>Genres:</strong> \\${properties.genres}</p>\n                <div class=\"popup-actions\">\n                  <a href=\"/artist/\\${properties.id}\" class=\"view-profile-btn\">\u{1F464} Voir le profil</a>\n                </div>\n              </div>\n            \\`)\n            .addTo(map);\n        });\n\n        // Change the cursor to a pointer when the mouse is over the layers\n        map.on('mouseenter', 'clusters', () => {\n          map.getCanvas().style.cursor = 'pointer';\n        });\n        map.on('mouseleave', 'clusters', () => {\n          map.getCanvas().style.cursor = '';\n        });\n\n        map.on('mouseenter', 'unclustered-point', () => {\n          map.getCanvas().style.cursor = 'pointer';\n        });\n        map.on('mouseleave', 'unclustered-point', () => {\n          map.getCanvas().style.cursor = '';\n        });\n\n        // Add click handler to get coordinates easily\n        map.on('click', function(e) {\n          const coords = e.lngLat;\n          console.log('\u{1F3AF} Clicked coordinates:');\n          console.log(\\`   Longitude: \\${coords.lng.toFixed(4)}\\`);\n          console.log(\\`   Latitude: \\${coords.lat.toFixed(4)}\\`);\n          console.log(\\`   Array format: [\\${coords.lng.toFixed(4)}, \\${coords.lat.toFixed(4)}]\\`);\n        });\n      });\n\n      map.on('error', function(e) {\n        console.error('\u{1F5FA}\uFE0F Mapbox error:', e);\n      });\n      \n    } catch (error) {\n      console.error('\u{1F5FA}\uFE0F Error initializing Mapbox:', error);\n    }\n  }\n  \n  // Cleanup before page swap (View Transitions)\n  document.addEventListener('astro:before-swap', () => {\n    cleanupMap();\n  });\n  \n  // Reinitialize after page swap (View Transitions)  \n  document.addEventListener('astro:after-swap', () => {\n    // Small delay to ensure DOM is ready\n    setTimeout(initializeMap, 50);\n  });\n  \n  // Initialize map on page load (View Transitions)\n  document.addEventListener('astro:page-load', () => {\n    setTimeout(initializeMap, 50);\n  });\n  \n  // Initialize on DOM content loaded (first load)\n  document.addEventListener('DOMContentLoaded', () => {\n    initializeMap();\n  });\n  \n  // Fallback for immediate execution\n  if (document.readyState !== 'loading') {\n    initializeMap();\n  }\n  \n})();<\/script>  <!-- Import Mapbox CSS and JS --> <link href=\"https://api.mapbox.com/mapbox-gl-js/v3.0.1/mapbox-gl.css\" rel=\"stylesheet\"> ", ""])), maybeRenderHead(), addAttribute(ShuffleBtn.src, "src"), artist_map_title(), filters.map((filter) => renderTemplate`<div${addAttribute(filter.id, "key")} class="filter-wrapper" data-astro-cid-4qmttrul> <button class="filter"${addAttribute(filter.id, "data-target")} data-astro-cid-4qmttrul> <img${addAttribute(filter.icon.src, "src")}${addAttribute(filter.label, "alt")} data-astro-cid-4qmttrul> </button> <!-- Ligne d'options cachée par défaut --> <div${addAttribute(filter.id, "id")} class="filter-options hidden mt-2 flex flex-wrap gap-2" data-astro-cid-4qmttrul> ${filter.options.map((opt) => renderTemplate`<span data-astro-cid-4qmttrul>${opt}</span>`)} </div> </div>`), defineScriptVars({ mapboxToken }), renderScript($$result, "/home/glm/wavmap/src/components/ArtistMap.astro?astro&type=script&index=0&lang.ts"));
}, "/home/glm/wavmap/src/components/ArtistMap.astro", void 0);

const $$Map = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": `${artist_map_title()} - Wavmap`, "description": artist_map_description() }, { "default": ($$result2) => renderTemplate`  ${maybeRenderHead()}<div class="min-h-screen"${addAttribute({ backgroundColor: "#A4A4A4" }, "style")}> ${renderComponent($$result2, "Navbar", $$Navbar, { "currentPage": "map" })} <!-- Map Section --> <main class="py-12"> <!-- <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"> --> ${renderComponent($$result2, "ArtistMap", $$ArtistMap, {})} <!-- </div> --> </main> ${renderComponent($$result2, "Footer", $$Footer, {})} </div> ` })}`;
}, "/home/glm/wavmap/src/pages/map.astro", void 0);

const $$file = "/home/glm/wavmap/src/pages/map.astro";
const $$url = "/map";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	default: $$Map,
	file: $$file,
	url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
